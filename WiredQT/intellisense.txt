{'os': ['abc', 'abort() -> NoReturn', 'access', 'add_dll_directory(path: str) -> _AddedDllDirectory', 'NoneType()', 'chdir(path: _FdOrPathType) -> None', 'chflags(path: _PathType, flags: int, follow_symlinks: bool=...) -> None', 'chmod', 'chown', 'chroot(path: _PathType) -> None', 'CLD_CONTINUED', 'CLD_DUMPED', 'CLD_EXITED', 'CLD_TRAPPED', 'close(fd: int) -> None', 'closerange(fd_low: int, fd_high: int) -> None', 'confstr(name: Union[str, int]) -> Optional[str]', 'confstr_names', 'cpu_count() -> Optional[int]', 'ctermid() -> str', 'curdir', 'defpath', 'device_encoding(fd: int) -> Optional[str]', 'devnull', 'DirEntry', 'dup(fd: int) -> int', 'dup2(fd: int, fd2: int, inheritable: bool=...) -> int', 'environ', 'environb', 'error', 'EX_CANTCREAT', 'EX_CONFIG', 'EX_DATAERR', 'EX_IOERR', 'EX_NOHOST', 'EX_NOINPUT', 'EX_NOPERM', 'EX_NOTFOUND', 'EX_NOUSER', 'EX_OK', 'EX_OSERR', 'EX_OSFILE', 'EX_PROTOCOL', 'EX_SOFTWARE', 'EX_TEMPFAIL', 'EX_UNAVAILABLE', 'EX_USAGE', 'execl', 'execle', 'execlp', 'execlpe', 'execv(path: _PathType, args: _ExecVArgs) -> NoReturn', 'execve(path: _FdOrPathType, args: _ExecVArgs, env: _ExecEnv) -> NoReturn', 'execvp(file: _PathType, args: _ExecVArgs) -> NoReturn', 'execvpe(file: _PathType, args: _ExecVArgs, env: _ExecEnv) -> NoReturn', 'extsep', 'F_LOCK', 'F_OK', 'F_TEST', 'F_TLOCK', 'F_ULOCK', 'fchdir(fd: int) -> None', 'fchmod(fd: int, mode: int) -> None', 'fchown(fd: int, uid: int, gid: int) -> None', 'fdatasync(fd: int) -> None', 'fdopen(fd: int, mode: str=..., buffering: int=..., encoding: Optional[str]=..., errors: str=..., newline: str=..., closefd: bool=...) -> Any', 'fork() -> int', 'forkpty() -> Tuple[int, int]', 'fpathconf(fd: int, name: Union[str, int]) -> int', 'fsdecode(filename: Union[str, bytes, PathLike[Any]]) -> str', 'fsencode(filename: Union[str, bytes, PathLike[Any]]) -> bytes', 'fspath(path: str) -> str', 'fstat(fd: int) -> stat_result', 'fstatvfs(fd: int) -> statvfs_result', 'fsync(fd: int) -> None', 'ftruncate(fd: int, length: int) -> None', 'fwalk', 'get_blocking(fd: int) -> bool', 'get_exec_path(env: Optional[Mapping[str, str]]=...) -> List[str]', 'get_handle_inheritable(handle, /)', 'get_inheritable(fd: int) -> bool', 'get_terminal_size(fd: int=...) -> terminal_size', 'getcwd() -> str', 'getcwdb() -> bytes', 'getegid() -> int', 'getenv(key: Text) -> Optional[str]', 'getenvb(key: bytes, default: bytes=...) -> bytes', 'geteuid() -> int', 'getgid() -> int', 'getgrouplist(user: str, gid: int) -> List[int]', 'getgroups() -> List[int]', 'getloadavg() -> Tuple[float, float, float]', 'getlogin() -> str', 'getpgid(pid: int) -> int', 'getpgrp() -> int', 'getpid() -> int', 'getppid() -> int', 'getpriority(which: int, who: int) -> int', 'getrandom(size: int, flags: int=...) -> bytes', 'getresgid() -> Tuple[int, int, int]', 'getresuid() -> Tuple[int, int, int]', 'getsid(pid: int) -> int', 'getuid() -> int', 'getxattr', 'GRND_NONBLOCK', 'GRND_RANDOM', 'initgroups(username: str, gid: int) -> None', 'isatty(fd: int) -> bool', 'kill(pid: int, sig: int) -> None', 'killpg(pgid: int, sig: int) -> None', 'lchflags(path: _PathType, flags: int) -> None', 'lchmod(path: _PathType, mode: int) -> None', 'lchown(path: _PathType, uid: int, gid: int) -> None', 'linesep', 'link', 'listdir(path: Optional[str]=...) -> List[str]', 'listxattr', 'lockf(fd: int, cmd: int, length: int, /) -> None', 'lseek(fd: int, pos: int, how: int) -> int', 'lstat', 'major(device: int) -> int', 'makedev(major: int, minor: int) -> int', 'makedirs(name: _PathType, mode: int=..., exist_ok: bool=...) -> None', 'memfd_create(name: str, flags: int=...) -> int', 'MFD_ALLOW_SEALING', 'MFD_CLOEXEC', 'MFD_HUGE_16GB', 'MFD_HUGE_16MB', 'MFD_HUGE_1GB', 'MFD_HUGE_1MB', 'MFD_HUGE_256MB', 'MFD_HUGE_2GB', 'MFD_HUGE_2MB', 'MFD_HUGE_32MB', 'MFD_HUGE_512KB', 'MFD_HUGE_512MB', 'MFD_HUGE_64KB', 'MFD_HUGE_8MB', 'MFD_HUGE_MASK', 'MFD_HUGE_SHIFT', 'MFD_HUGETLB', 'minor(device: int) -> int', 'mkdir', 'mkfifo', 'mknod', 'MutableMapping()', 'name', 'NGROUPS_MAX', 'nice(increment: int) -> int', 'O_ACCMODE', 'O_APPEND', 'O_ASYNC', 'O_BINARY', 'O_CLOEXEC', 'O_CREAT', 'O_DIRECT', 'O_DIRECTORY', 'O_DSYNC', 'O_EXCL', 'O_EXLOCK', 'O_LARGEFILE', 'O_NDELAY', 'O_NOATIME', 'O_NOCTTY', 'O_NOFOLLOW', 'O_NOINHERIT', 'O_NONBLOCK', 'O_PATH', 'O_RANDOM', 'O_RDONLY', 'O_RDWR', 'O_RSYNC', 'O_SEQUENTIAL', 'O_SHLOCK', 'O_SHORT_LIVED', 'O_SYNC', 'O_TEMPORARY', 'O_TEXT', 'O_TMPFILE', 'O_TRUNC', 'O_WRONLY', 'open', 'openpty() -> Tuple[int, int]', 'P_ALL', 'P_DETACH', 'P_NOWAIT', 'P_NOWAITO', 'P_OVERLAY', 'P_PGID', 'P_PID', 'P_WAIT', 'pardir', 'path', 'pathconf(path: _FdOrPathType, name: Union[str, int]) -> int', 'pathconf_names', 'PathLike', 'pathsep', 'pipe() -> Tuple[int, int]', 'pipe2(flags: int) -> Tuple[int, int]', 'plock(op: int) -> None', 'popen(command: str, mode: str=..., buffering: int=...) -> _wrap_close', 'POSIX_FADV_DONTNEED', 'POSIX_FADV_NOREUSE', 'POSIX_FADV_NORMAL', 'POSIX_FADV_RANDOM', 'POSIX_FADV_SEQUENTIAL', 'POSIX_FADV_WILLNEED', 'posix_fadvise(fd: int, offset: int, length: int, advice: int) -> None', 'posix_fallocate(fd: int, offset: int, length: int) -> None', 'pread(fd: int, buffersize: int, offset: int) -> bytes', 'PRIO_PGRP', 'PRIO_PROCESS', 'PRIO_USER', 'putenv(key: Union[bytes, Text], value: Union[bytes, Text]) -> None', 'pwrite(fd: int, string: bytes, offset: int) -> int', 'R_OK', 'read(fd: int, n: int) -> bytes', 'readlink', 'readv(fd: int, buffers: Sequence[bytearray]) -> int', 'register_at_fork(func: Callable[..., object], when: str) -> None', 'remove', 'removedirs(name: _PathType) -> None', 'removexattr', 'rename', 'renames(old: _PathType, new: _PathType) -> None', 'replace', 'rmdir', 'RTLD_DEEPBIND', 'RTLD_GLOBAL', 'RTLD_LAZY', 'RTLD_LOCAL', 'RTLD_NODELETE', 'RTLD_NOLOAD', 'RTLD_NOW', 'scandir() -> _ScandirIterator[str]', 'SCHED_BATCH', 'SCHED_FIFO', 'sched_get_priority_max(policy: int) -> int', 'sched_get_priority_min(policy: int) -> int', 'sched_getaffinity(pid: int) -> Set[int]', 'sched_getparam(pid: int) -> sched_param', 'sched_getscheduler(pid: int) -> int', 'SCHED_IDLE', 'SCHED_OTHER', 'sched_param', 'SCHED_RESET_ON_FORK', 'SCHED_RR', 'sched_rr_get_interval(pid: int) -> float', 'sched_setaffinity(pid: int, mask: Iterable[int]) -> None', 'sched_setparam(pid: int, param: sched_param) -> None', 'sched_setscheduler(pid: int, policy: int, param: sched_param) -> None', 'SCHED_SPORADIC', 'sched_yield() -> None', 'SEEK_CUR', 'SEEK_DATA', 'SEEK_END', 'SEEK_HOLE', 'SEEK_SET', 'sendfile(out_fd: int, in_fd: int, /, offset: Optional[int], count: int) -> int', 'sep', 'set_blocking(fd: int, blocking: bool) -> None', 'set_handle_inheritable(handle, inheritable, /)', 'set_inheritable(fd: int, inheritable: bool) -> None', 'setegid(egid: int) -> None', 'seteuid(euid: int) -> None', 'setgid(gid: int) -> None', 'setgroups(groups: Sequence[int]) -> None', 'setpgid(pid: int, pgrp: int) -> None', 'setpgrp() -> None', 'setpriority(which: int, who: int, priority: int) -> None', 'setregid(rgid: int, egid: int) -> None', 'setresgid(rgid: int, egid: int, sgid: int) -> None', 'setresuid(ruid: int, euid: int, suid: int) -> None', 'setreuid(ruid: int, euid: int) -> None', 'setsid() -> None', 'setuid(uid: int) -> None', 'setxattr', 'SF_MNOWAIT', 'SF_NODISKIO', 'SF_SYNC', 'spawnl', 'spawnle', 'spawnlp', 'spawnlpe', 'spawnv(mode: int, path: _PathType, args: List[Union[bytes, Text]]) -> int', 'spawnve(mode: int, path: _PathType, args: List[Union[bytes, Text]], env: _ExecEnv) -> int', 'spawnvp(mode: int, file: _PathType, args: List[Union[bytes, Text]]) -> int', 'spawnvpe(mode: int, file: _PathType, args: List[Union[bytes, Text]], env: _ExecEnv) -> int', 'st', 'ST_APPEND', 'ST_MANDLOCK', 'ST_NOATIME', 'ST_NODEV', 'ST_NODIRATIME', 'ST_NOEXEC', 'ST_NOSUID', 'ST_RDONLY', 'ST_RELATIME', 'ST_SYNCHRONOUS', 'ST_WRITE', 'startfile(path: _PathType, operation: Optional[str]=...) -> None', 'stat', 'stat_result(tuple: Tuple[int, ...])', 'statvfs(path: _FdOrPathType) -> statvfs_result', 'statvfs_result()', 'strerror(code: int) -> str', 'supports_bytes_environ', 'supports_dir_fd', 'supports_effective_ids', 'supports_fd', 'supports_follow_symlinks', 'symlink', 'sync() -> None', 'sys', 'sysconf(name: Union[str, int]) -> int', 'sysconf_names', 'system(command: _PathType) -> int', 'tcgetpgrp(fd: int) -> int', 'tcsetpgrp(fd: int, pg: int) -> None', 'terminal_size', 'times() -> times_result', 'times_result', 'TMP_MAX', 'truncate(path: _FdOrPathType, length: int) -> None', 'ttyname(fd: int) -> str', 'umask(mask: int) -> int', 'uname() -> uname_result', 'uname_result', 'unlink', 'unsetenv(key: Union[bytes, Text]) -> None', 'urandom(size: int) -> bytes', 'utime', 'W_OK', 'wait() -> Tuple[int, int]', 'wait3(options: int) -> Tuple[int, int, Any]', 'wait4(pid: int, options: int) -> Tuple[int, int, Any]', 'waitid(idtype: int, ident: int, options: int) -> waitid_result', 'waitid_result', 'waitpid(pid: int, options: int) -> Tuple[int, int]', 'walk(top: Union[AnyStr, PathLike[AnyStr]], topdown: bool=..., onerror: Optional[_OnError]=..., followlinks: bool=...) -> Iterator[Tuple[AnyStr, List[AnyStr],\n                                                        List[AnyStr]]]', 'WCONTINUED', 'WCOREDUMP(status: int) -> bool', 'WEXITED', 'WEXITSTATUS(status: int) -> int', 'WIFCONTINUED(status: int) -> bool', 'WIFEXITED(status: int) -> bool', 'WIFSIGNALED(status: int) -> bool', 'WIFSTOPPED(status: int) -> bool', 'WNOHANG', 'WNOWAIT', 'write(fd: int, string: bytes) -> int', 'writev(fd: int, buffers: Sequence[bytes]) -> int', 'WSTOPPED', 'WSTOPSIG(status: int) -> int', 'WTERMSIG(status: int) -> int', 'WUNTRACED', 'X_OK', 'XATTR_CREATE', 'XATTR_REPLACE', 'XATTR_SIZE_MAX', '_Environ(data, encodekey, decodekey, encodevalue, decodevalue, putenv, unsetenv)', '_execvpe(file, args, env=None)', '_exists(name)', '_exit(status)', '_fspath(path)', '_fwalk(topfd, toppath, isbytes, topdown, onerror, follow_symlinks)', '_get_exports_list(module)', '_getdiskusage(path)', '_getfinalpathname(path, /)', '_getfullpathname(path, /)', '_getvolumepathname(path)', '_isdir(path, /)', '<lambda>(key, value)', '_spawnvef(mode, file, args, env, func)', '<lambda>(key)', '_wrap_close(stream, proc)', '__all__', '__doc__', '__file__', 'BuiltinImporter()', '__name__', '__package__', 'ModuleSpec(may, /)'], 'cv2': ['absdiff(src1, src2, dst=None, /) -> dst', 'int(x=None, /) -> int', 'accumulate(src, dst, mask=None, /) -> dst', 'accumulateProduct(src1, src2, dst, mask=None, /) -> dst', 'accumulateSquare(src, dst, mask=None, /) -> dst', 'accumulateWeighted(src, dst, alpha, mask=None, /) -> dst', 'adaptiveThreshold(src, maxValue, adaptiveMethod, thresholdType, blockSize, C, dst=None, /) -> dst', 'add(src1, src2, dst=None, mask=None, dtype=None, /) -> dst', 'addText(img, text, org, nameFont, pointSize=None, color=None, weight=None, style=None, spacing=None, /) -> None', 'addWeighted(src1, alpha, src2, beta, gamma, dst=None, dtype=None, /) -> dst', 'AgastFeatureDetector()', 'AgastFeatureDetector_create(, threshold=None, nonmaxSuppression=None, type=None, /) -> retval', 'AKAZE()', 'AKAZE_create(, descriptor_type=None, descriptor_size=None, descriptor_channels=None, threshold=None, nOctaves=None, nOctaveLayers=None, diffusivity=None, /) -> retval', 'Algorithm()', 'AlignExposures()', 'AlignMTB()', 'applyColorMap(src, colormap, dst=None, /) -> dst', 'approxPolyDP(curve, epsilon, closed, approxCurve=None, /) -> approxCurve', 'arcLength(curve, closed, /) -> retval', 'arrowedLine(img, pt1, pt2, color, thickness=None, line_type=None, shift=None, tipLength=None, /) -> img', 'AsyncArray()', 'BackgroundSubtractor()', 'BackgroundSubtractorKNN()', 'BackgroundSubtractorMOG2()', 'BaseCascadeClassifier()', 'batchDistance(src1, src2, dtype, dist=None, nidx=None, normType=None, K=None, mask=None, update=None, crosscheck=None, /) -> dist, nidx', 'BFMatcher()', 'BFMatcher_create(, normType=None, crossCheck=None, /) -> retval', 'bilateralFilter(src, d, sigmaColor, sigmaSpace, dst=None, borderType=None, /) -> dst', 'bitwise_and(src1, src2, dst=None, mask=None, /) -> dst', 'bitwise_not(src, dst=None, mask=None, /) -> dst', 'bitwise_or(src1, src2, dst=None, mask=None, /) -> dst', 'bitwise_xor(src1, src2, dst=None, mask=None, /) -> dst', 'blur(src, ksize, dst=None, anchor=None, borderType=None, /) -> dst', 'borderInterpolate(p, len, borderType, /) -> retval', 'boundingRect(array, /) -> retval', 'BOWImgDescriptorExtractor()', 'BOWKMeansTrainer()', 'BOWTrainer()', 'boxFilter(src, ddepth, ksize, dst=None, anchor=None, normalize=None, borderType=None, /) -> dst', 'boxPoints(box, points=None, /) -> points', 'BRISK()', 'BRISK_create(, thresh=None, octaves=None, patternScale=None, /) -> retval', 'buildOpticalFlowPyramid(img, winSize, maxLevel, pyramid=None, withDerivatives=None, pyrBorder=None, derivBorder=None, tryReuseInputImage=None, /) -> retval, pyramid', 'calcBackProject(images, channels, hist, ranges, scale, dst=None, /) -> dst', 'calcCovarMatrix(samples, mean, flags, covar=None, ctype=None, /) -> covar, mean', 'calcHist(images, channels, mask, histSize, ranges, hist=None, accumulate=None, /) -> hist', 'calcOpticalFlowFarneback(prev, next, flow, pyr_scale, levels, winsize, iterations, poly_n, poly_sigma, flags, /) -> flow', 'calcOpticalFlowPyrLK(prevImg, nextImg, prevPts, nextPts, status=None, err=None, winSize=None, maxLevel=None, criteria=None, flags=None, minEigThreshold=None, /) -> nextPts, status, err', 'calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs, rvecs=None, tvecs=None, flags=None, criteria=None, /) -> retval, cameraMatrix, distCoeffs, rvecs, tvecs', 'calibrateCameraExtended(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs, rvecs=None, tvecs=None, stdDeviationsIntrinsics=None, stdDeviationsExtrinsics=None, perViewErrors=None, flags=None, criteria=None, /) -> retval, cameraMatrix, distCoeffs, rvecs, tvecs, stdDeviationsIntrinsics, stdDeviationsExtrinsics, perViewErrors', 'calibrateCameraRO(objectPoints, imagePoints, imageSize, iFixedPoint, cameraMatrix, distCoeffs, rvecs=None, tvecs=None, newObjPoints=None, flags=None, criteria=None, /) -> retval, cameraMatrix, distCoeffs, rvecs, tvecs, newObjPoints', 'calibrateCameraROExtended(objectPoints, imagePoints, imageSize, iFixedPoint, cameraMatrix, distCoeffs, rvecs=None, tvecs=None, newObjPoints=None, stdDeviationsIntrinsics=None, stdDeviationsExtrinsics=None, stdDeviationsObjPoints=None, perViewErrors=None, flags=None, criteria=None, /) -> retval, cameraMatrix, distCoeffs, rvecs, tvecs, newObjPoints, stdDeviationsIntrinsics, stdDeviationsExtrinsics, stdDeviationsObjPoints, perViewErrors', 'CalibrateCRF()', 'CalibrateDebevec()', 'calibrateHandEye(R_gripper2base, t_gripper2base, R_target2cam, t_target2cam, R_cam2gripper=None, t_cam2gripper=None, method=None, /) -> R_cam2gripper, t_cam2gripper', 'CalibrateRobertson()', 'calibrationMatrixValues(cameraMatrix, imageSize, apertureWidth, apertureHeight, /) -> fovx, fovy, focalLength, principalPoint, aspectRatio', 'CamShift(probImage, window, criteria, /) -> retval, window', 'Canny(image, threshold1, threshold2, edges=None, apertureSize=None, L2gradient=None, /) -> edges', 'cartToPolar(x, y, magnitude=None, angle=None, angleInDegrees=None, /) -> magnitude, angle', 'CascadeClassifier()', 'CascadeClassifier_convert(oldcascade, newcascade, /) -> retval', 'checkChessboard(img, size, /) -> retval', 'checkHardwareSupport(feature, /) -> retval', 'checkRange(a, quiet=None, minVal=None, maxVal=None, /) -> retval, pos', 'circle(img, center, radius, color, thickness=None, lineType=None, shift=None, /) -> img', 'CirclesGridFinderParameters()', 'CLAHE()', 'clipLine(imgRect, pt1, pt2, /) -> retval, pt1, pt2', 'colorChange(src, mask, dst=None, red_mul=None, green_mul=None, blue_mul=None, /) -> dst', 'compare(src1, src2, cmpop, dst=None, /) -> dst', 'compareHist(H1, H2, method, /) -> retval', 'completeSymm(m, lowerToUpper=None, /) -> m', 'composeRT(rvec1, tvec1, rvec2, tvec2, rvec3=None, tvec3=None, dr3dr1=None, dr3dt1=None, dr3dr2=None, dr3dt2=None, dt3dr1=None, dt3dt1=None, dt3dr2=None, dt3dt2=None, /) -> rvec3, tvec3, dr3dr1, dr3dt1, dr3dr2, dr3dt2, dt3dr1, dt3dt1, dt3dr2, dt3dt2', 'computeCorrespondEpilines(points, whichImage, F, lines=None, /) -> lines', 'computeECC(templateImage, inputImage, inputMask=None, /) -> retval', 'connectedComponents(image, labels=None, connectivity=None, ltype=None, /) -> retval, labels', 'connectedComponentsWithAlgorithm(image, connectivity, ltype, ccltype, labels=None, /) -> retval, labels', 'connectedComponentsWithStats(image, labels=None, stats=None, centroids=None, connectivity=None, ltype=None, /) -> retval, labels, stats, centroids', 'connectedComponentsWithStatsWithAlgorithm(image, connectivity, ltype, ccltype, labels=None, stats=None, centroids=None, /) -> retval, labels, stats, centroids', 'contourArea(contour, oriented=None, /) -> retval', 'convertFp16(src, dst=None, /) -> dst', 'convertMaps(map1, map2, dstmap1type, dstmap1=None, dstmap2=None, nninterpolation=None, /) -> dstmap1, dstmap2', 'convertPointsFromHomogeneous(src, dst=None, /) -> dst', 'convertPointsToHomogeneous(src, dst=None, /) -> dst', 'convertScaleAbs(src, dst=None, alpha=None, beta=None, /) -> dst', 'convexHull(points, hull=None, clockwise=None, returnPoints=None, /) -> hull', 'convexityDefects(contour, convexhull, convexityDefects=None, /) -> convexityDefects', 'copyMakeBorder(src, top, bottom, left, right, borderType, dst=None, value=None, /) -> dst', 'copyTo(src, mask, dst=None, /) -> dst', 'cornerEigenValsAndVecs(src, blockSize, ksize, dst=None, borderType=None, /) -> dst', 'cornerHarris(src, blockSize, ksize, k, dst=None, borderType=None, /) -> dst', 'cornerMinEigenVal(src, blockSize, dst=None, ksize=None, borderType=None, /) -> dst', 'cornerSubPix(image, corners, winSize, zeroZone, criteria, /) -> corners', 'correctMatches(F, points1, points2, newPoints1=None, newPoints2=None, /) -> newPoints1, newPoints2', 'countNonZero(src, /) -> retval', 'createAlignMTB(, max_bits=None, exclude_range=None, cut=None, /) -> retval', 'createBackgroundSubtractorKNN(, history=None, dist2Threshold=None, detectShadows=None, /) -> retval', 'createBackgroundSubtractorMOG2(, history=None, varThreshold=None, detectShadows=None, /) -> retval', 'createButton(buttonName, onChange, userData=None, buttonType=None, initialButtonState=None, /) -> None', 'createCalibrateDebevec(, samples=None, lambda=None, random=None, /) -> retval', 'createCalibrateRobertson(, max_iter=None, threshold=None, /) -> retval', 'createCLAHE(, clipLimit=None, tileGridSize=None, /) -> retval', 'createGeneralizedHoughBallard() -> retval', 'createGeneralizedHoughGuil() -> retval', 'createHanningWindow(winSize, type, dst=None, /) -> dst', 'createLineSegmentDetector(, _refine=None, _scale=None, _sigma_scale=None, _quant=None, _ang_th=None, _log_eps=None, _density_th=None, _n_bins=None, /) -> retval', 'createMergeDebevec() -> retval', 'createMergeMertens(, contrast_weight=None, saturation_weight=None, exposure_weight=None, /) -> retval', 'createMergeRobertson() -> retval', 'createTonemap(, gamma=None, /) -> retval', 'createTonemapDrago(, gamma=None, saturation=None, bias=None, /) -> retval', 'createTonemapMantiuk(, gamma=None, scale=None, saturation=None, /) -> retval', 'createTonemapReinhard(, gamma=None, intensity=None, light_adapt=None, color_adapt=None, /) -> retval', 'createTrackbar(trackbarName, windowName, value, count, onChange, /) -> None', 'cubeRoot(val, /) -> retval', 'cv2.cuda()', 'cuda_BufferPool()', 'cuda_DeviceInfo()', 'cuda_Event()', 'cuda_GpuMat()', 'cuda_GpuMat_Allocator()', 'cuda_HostMem()', 'cuda_Stream()', 'cuda_TargetArchs()', 'cv2.cv2()', 'cvtColor(src, code, dst=None, dstCn=None, /) -> dst', 'cvtColorTwoPlane(src1, src2, code, dst=None, /) -> dst', 'data', 'dct(src, dst=None, flags=None, /) -> dst', 'decolor(src, grayscale=None, color_boost=None, /) -> grayscale, color_boost', 'decomposeEssentialMat(E, R1=None, R2=None, t=None, /) -> R1, R2, t', 'decomposeHomographyMat(H, K, rotations=None, translations=None, normals=None, /) -> retval, rotations, translations, normals', 'decomposeProjectionMatrix(projMatrix, cameraMatrix=None, rotMatrix=None, transVect=None, rotMatrixX=None, rotMatrixY=None, rotMatrixZ=None, eulerAngles=None, /) -> cameraMatrix, rotMatrix, transVect, rotMatrixX, rotMatrixY, rotMatrixZ, eulerAngles', 'demosaicing(src, code, dst=None, dstCn=None, /) -> dst', 'denoise_TVL1(observations, result, lambda=None, niters=None, /) -> None', 'DenseOpticalFlow()', 'DescriptorMatcher()', 'DescriptorMatcher_create(descriptorMatcherType, /) -> retval', 'destroyAllWindows() -> None', 'destroyWindow(winname, /) -> None', 'cv2.detail()', 'detail_AffineBasedEstimator()', 'detail_AffineBestOf2NearestMatcher()', 'detail_BestOf2NearestMatcher()', 'detail_BestOf2NearestRangeMatcher()', 'detail_Blender()', 'detail_BlocksChannelsCompensator()', 'detail_BlocksCompensator()', 'detail_BlocksGainCompensator()', 'detail_BundleAdjusterAffine()', 'detail_BundleAdjusterAffinePartial()', 'detail_BundleAdjusterBase()', 'detail_BundleAdjusterRay()', 'detail_BundleAdjusterReproj()', 'detail_CameraParams()', 'detail_ChannelsCompensator()', 'detail_DpSeamFinder()', 'detail_Estimator()', 'detail_ExposureCompensator()', 'detail_FeatherBlender()', 'detail_FeaturesMatcher()', 'detail_GainCompensator()', 'detail_GraphCutSeamFinder()', 'detail_HomographyBasedEstimator()', 'detail_ImageFeatures()', 'detail_MatchesInfo()', 'detail_MultiBandBlender()', 'detail_NoBundleAdjuster()', 'detail_NoExposureCompensator()', 'detail_NoSeamFinder()', 'detail_PairwiseSeamFinder()', 'detail_ProjectorBase()', 'detail_SeamFinder()', 'detail_SphericalProjector()', 'detail_Timelapser()', 'detail_TimelapserCrop()', 'detail_VoronoiSeamFinder()', 'detailEnhance(src, dst=None, sigma_s=None, sigma_r=None, /) -> dst', 'determinant(mtx, /) -> retval', 'dft(src, dst=None, flags=None, nonzeroRows=None, /) -> dst', 'dilate(src, kernel, dst=None, anchor=None, iterations=None, borderType=None, borderValue=None, /) -> dst', 'DISOpticalFlow()', 'DISOpticalFlow_create(, preset=None, /) -> retval', 'displayOverlay(winname, text, delayms=None, /) -> None', 'displayStatusBar(winname, text, delayms=None, /) -> None', 'distanceTransform(src, distanceType, maskSize, dst=None, dstType=None, /) -> dst', 'distanceTransformWithLabels(src, distanceType, maskSize, dst=None, labels=None, labelType=None, /) -> dst, labels', 'divide(src1, src2, dst=None, scale=None, dtype=None, /) -> dst', 'DMatch()', 'cv2.dnn()', 'dnn_ClassificationModel()', 'dnn_DetectionModel()', 'dnn_DictValue()', 'dnn_Layer()', 'dnn_Model()', 'dnn_Net()', 'dnn_registerLayer(type, class, /) -> None', 'dnn_SegmentationModel()', 'dnn_unregisterLayer(type, /) -> None', 'drawChessboardCorners(image, patternSize, corners, patternWasFound, /) -> image', 'drawContours(image, contours, contourIdx, color, thickness=None, lineType=None, hierarchy=None, maxLevel=None, offset=None, /) -> image', 'drawFrameAxes(image, cameraMatrix, distCoeffs, rvec, tvec, length, thickness=None, /) -> image', 'drawKeypoints(image, keypoints, outImage, color=None, flags=None, /) -> outImage', 'drawMarker(img, position, color, markerType=None, markerSize=None, thickness=None, line_type=None, /) -> img', 'drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor=None, singlePointColor=None, matchesMask=None, flags=None, /) -> outImg', 'drawMatchesKnn(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor=None, singlePointColor=None, matchesMask=None, flags=None, /) -> outImg', 'edgePreservingFilter(src, dst=None, flags=None, sigma_s=None, sigma_r=None, /) -> dst', 'eigen(src, eigenvalues=None, eigenvectors=None, /) -> retval, eigenvalues, eigenvectors', 'eigenNonSymmetric(src, eigenvalues=None, eigenvectors=None, /) -> eigenvalues, eigenvectors', 'ellipse(img, center, axes, angle, startAngle, endAngle, color, thickness=None, lineType=None, shift=None, /) -> img', 'ellipse2Poly(center, axes, angle, arcStart, arcEnd, delta, /) -> pts', 'EMD(signature1, signature2, distType, cost=None, lowerBound=None, flow=None, /) -> retval, lowerBound, flow', 'equalizeHist(src, dst=None, /) -> dst', 'erode(src, kernel, dst=None, anchor=None, iterations=None, borderType=None, borderValue=None, /) -> dst', 'cv2.Error()', 'error()', 'estimateAffine2D(from, to, inliers=None, method=None, ransacReprojThreshold=None, maxIters=None, confidence=None, refineIters=None, /) -> retval, inliers', 'estimateAffine3D(src, dst, out=None, inliers=None, ransacThreshold=None, confidence=None, /) -> retval, out, inliers', 'estimateAffinePartial2D(from, to, inliers=None, method=None, ransacReprojThreshold=None, maxIters=None, confidence=None, refineIters=None, /) -> retval, inliers', 'exp(src, dst=None, /) -> dst', 'extractChannel(src, coi, dst=None, /) -> dst', 'FarnebackOpticalFlow()', 'FarnebackOpticalFlow_create(, numLevels=None, pyrScale=None, fastPyramids=None, winSize=None, numIters=None, polyN=None, polySigma=None, flags=None, /) -> retval', 'fastAtan2(y, x, /) -> retval', 'FastFeatureDetector()', 'FastFeatureDetector_create(, threshold=None, nonmaxSuppression=None, type=None, /) -> retval', 'fastNlMeansDenoising(src, dst=None, h=None, templateWindowSize=None, searchWindowSize=None, /) -> dst', 'fastNlMeansDenoisingColored(src, dst=None, h=None, hColor=None, templateWindowSize=None, searchWindowSize=None, /) -> dst', 'fastNlMeansDenoisingColoredMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize, dst=None, h=None, hColor=None, templateWindowSize=None, searchWindowSize=None, /) -> dst', 'fastNlMeansDenoisingMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize, dst=None, h=None, templateWindowSize=None, searchWindowSize=None, /) -> dst', 'Feature2D()', 'FileNode()', 'FileStorage()', 'fillConvexPoly(img, points, color, lineType=None, shift=None, /) -> img', 'fillPoly(img, pts, color, lineType=None, shift=None, offset=None, /) -> img', 'filter2D(src, ddepth, kernel, dst=None, anchor=None, delta=None, borderType=None, /) -> dst', 'filterHomographyDecompByVisibleRefpoints(rotations, normals, beforePoints, afterPoints, possibleSolutions=None, pointsMask=None, /) -> possibleSolutions', 'filterSpeckles(img, newVal, maxSpeckleSize, maxDiff, buf=None, /) -> img, buf', 'find4QuadCornerSubpix(img, corners, region_size, /) -> retval, corners', 'findChessboardCorners(image, patternSize, corners=None, flags=None, /) -> retval, corners', 'findChessboardCornersSB(image, patternSize, corners=None, flags=None, /) -> retval, corners', 'findCirclesGrid(image, patternSize, flags, blobDetector, parameters, centers=None, /) -> retval, centers', 'findContours(image, mode, method, contours=None, hierarchy=None, offset=None, /) -> contours, hierarchy', 'findEssentialMat(points1, points2, cameraMatrix, method=None, prob=None, threshold=None, mask=None, /) -> retval, mask', 'findFundamentalMat(points1, points2, method=None, ransacReprojThreshold=None, confidence=None, mask=None, /) -> retval, mask', 'findHomography(srcPoints, dstPoints, method=None, ransacReprojThreshold=None, mask=None, maxIters=None, confidence=None, /) -> retval, mask', 'findNonZero(src, idx=None, /) -> idx', 'findTransformECC(templateImage, inputImage, warpMatrix, motionType, criteria, inputMask, gaussFiltSize, /) -> retval, warpMatrix', 'cv2.fisheye()', 'fitEllipse(points, /) -> retval', 'fitEllipseAMS(points, /) -> retval', 'fitEllipseDirect(points, /) -> retval', 'fitLine(points, distType, param, reps, aeps, line=None, /) -> line', 'cv2.flann()', 'flann_Index()', 'FlannBasedMatcher()', 'FlannBasedMatcher_create() -> retval', 'flip(src, flipCode, dst=None, /) -> dst', 'floodFill(image, mask, seedPoint, newVal, loDiff=None, upDiff=None, flags=None, /) -> retval, image, mask, rect', 'GaussianBlur(src, ksize, sigmaX, dst=None, sigmaY=None, borderType=None, /) -> dst', 'gemm(src1, src2, alpha, src3, beta, dst=None, flags=None, /) -> dst', 'GeneralizedHough()', 'GeneralizedHoughBallard()', 'GeneralizedHoughGuil()', 'getAffineTransform(src, dst, /) -> retval', 'getBuildInformation() -> retval', 'getCPUTickCount() -> retval', 'getDefaultNewCameraMatrix(cameraMatrix, imgsize=None, centerPrincipalPoint=None, /) -> retval', 'getDerivKernels(dx, dy, ksize, kx=None, ky=None, normalize=None, ktype=None, /) -> kx, ky', 'getFontScaleFromHeight(fontFace, pixelHeight, thickness=None, /) -> retval', 'getGaborKernel(ksize, sigma, theta, lambd, gamma, psi=None, ktype=None, /) -> retval', 'getGaussianKernel(ksize, sigma, ktype=None, /) -> retval', 'getHardwareFeatureName(feature, /) -> retval', 'getNumberOfCPUs() -> retval', 'getNumThreads() -> retval', 'getOptimalDFTSize(vecsize, /) -> retval', 'getOptimalNewCameraMatrix(cameraMatrix, distCoeffs, imageSize, alpha, newImgSize=None, centerPrincipalPoint=None, /) -> retval, validPixROI', 'getPerspectiveTransform(src, dst, solveMethod=None, /) -> retval', 'getRectSubPix(image, patchSize, center, patch=None, patchType=None, /) -> patch', 'getRotationMatrix2D(center, angle, scale, /) -> retval', 'getStructuringElement(shape, ksize, anchor=None, /) -> retval', 'getTextSize(text, fontFace, fontScale, thickness, /) -> retval, baseLine', 'getThreadNum() -> retval', 'getTickCount() -> retval', 'getTickFrequency() -> retval', 'getTrackbarPos(trackbarname, winname, /) -> retval', 'getValidDisparityROI(roi1, roi2, minDisparity, numberOfDisparities, SADWindowSize, /) -> retval', 'getVersionMajor() -> retval', 'getVersionMinor() -> retval', 'getVersionRevision() -> retval', 'getVersionString() -> retval', 'getWindowImageRect(winname, /) -> retval', 'getWindowProperty(winname, prop_id, /) -> retval', 'GFTTDetector()', 'GFTTDetector_create(, maxCorners=None, qualityLevel=None, minDistance=None, blockSize=None, useHarrisDetector=None, k=None, /) -> retval', 'goodFeaturesToTrack(image, maxCorners, qualityLevel, minDistance, corners=None, mask=None, blockSize=None, useHarrisDetector=None, k=None, /) -> corners', 'grabCut(img, mask, rect, bgdModel, fgdModel, iterCount, mode=None, /) -> mask, bgdModel, fgdModel', 'groupRectangles(rectList, groupThreshold, eps=None, /) -> rectList, weights', 'haarcascades', 'haveImageReader(filename, /) -> retval', 'haveImageWriter(filename, /) -> retval', 'haveOpenVX() -> retval', 'hconcat(src, dst=None, /) -> dst', 'HOGDescriptor()', 'HOGDescriptor_getDaimlerPeopleDetector() -> retval', 'HOGDescriptor_getDefaultPeopleDetector() -> retval', 'HoughCircles(image, method, dp, minDist, circles=None, param1=None, param2=None, minRadius=None, maxRadius=None, /) -> circles', 'HoughLines(image, rho, theta, threshold, lines=None, srn=None, stn=None, min_theta=None, max_theta=None, /) -> lines', 'HoughLinesP(image, rho, theta, threshold, lines=None, minLineLength=None, maxLineGap=None, /) -> lines', 'HoughLinesPointSet(_point, lines_max, threshold, min_rho, max_rho, rho_step, min_theta, max_theta, theta_step, _lines=None, /) -> _lines', 'HuMoments(m, hu=None, /) -> hu', 'idct(src, dst=None, flags=None, /) -> dst', 'idft(src, dst=None, flags=None, nonzeroRows=None, /) -> dst', 'illuminationChange(src, mask, dst=None, alpha=None, beta=None, /) -> dst', 'imdecode(buf, flags, /) -> retval', 'imencode(ext, img, params=None, /) -> retval, buf', 'importlib', 'imread(filename, flags=None, /) -> retval', 'imreadmulti(filename, mats=None, flags=None, /) -> retval, mats', 'imshow(winname, mat, /) -> None', 'imwrite(filename, img, params=None, /) -> retval', 'initCameraMatrix2D(objectPoints, imagePoints, imageSize, aspectRatio=None, /) -> retval', 'initUndistortRectifyMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type, map1=None, map2=None, /) -> map1, map2', 'inpaint(src, inpaintMask, inpaintRadius, flags, dst=None, /) -> dst', 'inRange(src, lowerb, upperb, dst=None, /) -> dst', 'insertChannel(src, dst, coi, /) -> dst', 'cv2.instr()', 'integral(src, sum=None, sdepth=None, /) -> sum', 'integral2(src, sum=None, sqsum=None, sdepth=None, sqdepth=None, /) -> sum, sqsum', 'integral3(src, sum=None, sqsum=None, tilted=None, sdepth=None, sqdepth=None, /) -> sum, sqsum, tilted', 'intersectConvexConvex(_p1, _p2, _p12=None, handleNested=None, /) -> retval, _p12', 'invert(src, dst=None, flags=None, /) -> retval, dst', 'invertAffineTransform(M, iM=None, /) -> iM', 'cv2.ipp()', 'isContourConvex(contour, /) -> retval', 'KalmanFilter()', 'KAZE()', 'KAZE_create(, extended=None, upright=None, threshold=None, nOctaves=None, nOctaveLayers=None, diffusivity=None, /) -> retval', 'KeyPoint()', 'KeyPoint_convert(keypoints, keypointIndexes=None, /) -> points2f', 'KeyPoint_overlap(kp1, kp2, /) -> retval', 'kmeans(data, K, bestLabels, criteria, attempts, flags, centers=None, /) -> retval, bestLabels, centers', 'Laplacian(src, ddepth, dst=None, ksize=None, scale=None, delta=None, borderType=None, /) -> dst', 'line(img, pt1, pt2, color, thickness=None, lineType=None, shift=None, /) -> img', 'linearPolar(src, center, maxRadius, flags, dst=None, /) -> dst', 'LineSegmentDetector()', 'log(src, dst=None, /) -> dst', 'logPolar(src, center, M, flags, dst=None, /) -> dst', 'LUT(src, lut, dst=None, /) -> dst', 'magnitude(x, y, magnitude=None, /) -> magnitude', 'Mahalanobis(v1, v2, icovar, /) -> retval', 'matchShapes(contour1, contour2, method, parameter, /) -> retval', 'matchTemplate(image, templ, method, result=None, mask=None, /) -> result', 'matMulDeriv(A, B, dABdA=None, dABdB=None, /) -> dABdA, dABdB', 'max(src1, src2, dst=None, /) -> dst', 'mean(src, mask=None, /) -> retval', 'meanShift(probImage, window, criteria, /) -> retval, window', 'meanStdDev(src, mean=None, stddev=None, mask=None, /) -> mean, stddev', 'medianBlur(src, ksize, dst=None, /) -> dst', 'merge(mv, dst=None, /) -> dst', 'MergeDebevec()', 'MergeExposures()', 'MergeMertens()', 'MergeRobertson()', 'min(src1, src2, dst=None, /) -> dst', 'minAreaRect(points, /) -> retval', 'minEnclosingCircle(points, /) -> center, radius', 'minEnclosingTriangle(points, triangle=None, /) -> retval, triangle', 'minMaxLoc(src, mask=None, /) -> minVal, maxVal, minLoc, maxLoc', 'mixChannels(src, dst, fromTo, /) -> dst', 'cv2.ml()', 'ml_ANN_MLP()', 'ml_Boost()', 'ml_DTrees()', 'ml_EM()', 'ml_KNearest()', 'ml_LogisticRegression()', 'ml_NormalBayesClassifier()', 'ml_ParamGrid()', 'ml_RTrees()', 'ml_StatModel()', 'ml_SVM()', 'ml_SVMSGD()', 'ml_TrainData()', 'moments(array, binaryImage=None, /) -> retval', 'morphologyEx(src, op, kernel, dst=None, anchor=None, iterations=None, borderType=None, borderValue=None, /) -> dst', 'moveWindow(winname, x, y, /) -> None', 'MSER()', 'MSER_create(, _delta=None, _min_area=None, _max_area=None, _max_variation=None, _min_diversity=None, _max_evolution=None, _area_threshold=None, _min_margin=None, _edge_blur_size=None, /) -> retval', 'mulSpectrums(a, b, flags, c=None, conjB=None, /) -> c', 'multiply(src1, src2, dst=None, scale=None, dtype=None, /) -> dst', 'mulTransposed(src, aTa, dst=None, delta=None, scale=None, dtype=None, /) -> dst', 'namedWindow(winname, flags=None, /) -> None', 'norm(src1, normType=None, mask=None, /) -> retval', 'normalize(src, dst, alpha=None, beta=None, norm_type=None, dtype=None, mask=None, /) -> dst', 'cv2.ocl()', 'ocl_Device()', 'cv2.ogl()', 'ORB()', 'ORB_create(, nfeatures=None, scaleFactor=None, nlevels=None, edgeThreshold=None, firstLevel=None, WTA_K=None, scoreType=None, patchSize=None, fastThreshold=None, /) -> retval', 'os', 'patchNaNs(a, val=None, /) -> a', 'PCABackProject(data, mean, eigenvectors, result=None, /) -> result', 'PCACompute(data, mean, eigenvectors=None, maxComponents=None, /) -> mean, eigenvectors', 'PCACompute2(data, mean, eigenvectors=None, eigenvalues=None, maxComponents=None, /) -> mean, eigenvectors, eigenvalues', 'PCAProject(data, mean, eigenvectors, result=None, /) -> result', 'pencilSketch(src, dst1=None, dst2=None, sigma_s=None, sigma_r=None, shade_factor=None, /) -> dst1, dst2', 'perspectiveTransform(src, m, dst=None, /) -> dst', 'phase(x, y, angle=None, angleInDegrees=None, /) -> angle', 'phaseCorrelate(src1, src2, window=None, /) -> retval, response', 'pointPolygonTest(contour, pt, measureDist, /) -> retval', 'polarToCart(magnitude, angle, x=None, y=None, angleInDegrees=None, /) -> x, y', 'polylines(img, pts, isClosed, color, thickness=None, lineType=None, shift=None, /) -> img', 'pow(src, power, dst=None, /) -> dst', 'preCornerDetect(src, ksize, dst=None, borderType=None, /) -> dst', 'projectPoints(objectPoints, rvec, tvec, cameraMatrix, distCoeffs, imagePoints=None, jacobian=None, aspectRatio=None, /) -> imagePoints, jacobian', 'PSNR(src1, src2, R=None, /) -> retval', 'putText(img, text, org, fontFace, fontScale, color, thickness=None, lineType=None, bottomLeftOrigin=None, /) -> img', 'pyrDown(src, dst=None, dstsize=None, borderType=None, /) -> dst', 'pyrMeanShiftFiltering(src, sp, sr, dst=None, maxLevel=None, termcrit=None, /) -> dst', 'PyRotationWarper()', 'pyrUp(src, dst=None, dstsize=None, borderType=None, /) -> dst', 'QRCodeDetector()', 'randn(dst, mean, stddev, /) -> dst', 'randShuffle(dst, iterFactor=None, /) -> dst', 'randu(dst, low, high, /) -> dst', 'readOpticalFlow(path, /) -> retval', 'recoverPose(E, points1, points2, cameraMatrix, R=None, t=None, mask=None, /) -> retval, R, t, mask', 'rectangle(img, pt1, pt2, color, thickness=None, lineType=None, shift=None, /) -> img', 'rectify3Collinear(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, cameraMatrix3, distCoeffs3, imgpt1, imgpt3, imageSize, R12, T12, R13, T13, alpha, newImgSize, flags, R1=None, R2=None, R3=None, P1=None, P2=None, P3=None, Q=None, /) -> retval, R1, R2, R3, P1, P2, P3, Q, roi1, roi2', 'redirectError(onError, /) -> None', 'reduce(src, dim, rtype, dst=None, dtype=None, /) -> dst', 'remap(src, map1, map2, interpolation, dst=None, borderMode=None, borderValue=None, /) -> dst', 'repeat(src, ny, nx, dst=None, /) -> dst', 'reprojectImageTo3D(disparity, Q, _3dImage=None, handleMissingValues=None, ddepth=None, /) -> _3dImage', 'resize(src, dsize, dst=None, fx=None, fy=None, interpolation=None, /) -> dst', 'resizeWindow(winname, width, height, /) -> None', 'Rodrigues(src, dst=None, jacobian=None, /) -> dst, jacobian', 'rotate(src, rotateCode, dst=None, /) -> dst', 'rotatedRectangleIntersection(rect1, rect2, intersectingRegion=None, /) -> retval, intersectingRegion', 'RQDecomp3x3(src, mtxR=None, mtxQ=None, Qx=None, Qy=None, Qz=None, /) -> retval, mtxR, mtxQ, Qx, Qy, Qz', 'cv2.samples()', 'sampsonDistance(pt1, pt2, F, /) -> retval', 'scaleAdd(src1, alpha, src2, dst=None, /) -> dst', 'Scharr(src, ddepth, dx, dy, dst=None, scale=None, delta=None, borderType=None, /) -> dst', 'seamlessClone(src, dst, mask, p, flags, blend=None, /) -> blend', 'selectROI(windowName, img, showCrosshair=None, fromCenter=None, /) -> retval', 'selectROIs(windowName, img, showCrosshair=None, fromCenter=None, /) -> boundingBoxes', 'sepFilter2D(src, ddepth, kernelX, kernelY, dst=None, anchor=None, delta=None, borderType=None, /) -> dst', 'setIdentity(mtx, s=None, /) -> mtx', 'setMouseCallback(windowName, onMouse, param=None, /) -> None', 'setNumThreads(nthreads, /) -> None', 'setRNGSeed(seed, /) -> None', 'setTrackbarMax(trackbarname, winname, maxval, /) -> None', 'setTrackbarMin(trackbarname, winname, minval, /) -> None', 'setTrackbarPos(trackbarname, winname, pos, /) -> None', 'setUseOpenVX(flag, /) -> None', 'setUseOptimized(onoff, /) -> None', 'setWindowProperty(winname, prop_id, prop_value, /) -> None', 'setWindowTitle(winname, title, /) -> None', 'SimpleBlobDetector()', 'SimpleBlobDetector_create(, parameters=None, /) -> retval', 'SimpleBlobDetector_Params()', 'Sobel(src, ddepth, dx, dy, dst=None, ksize=None, scale=None, delta=None, borderType=None, /) -> dst', 'solve(src1, src2, dst=None, flags=None, /) -> retval, dst', 'solveCubic(coeffs, roots=None, /) -> retval, roots', 'solveLP(Func, Constr, z=None, /) -> retval, z', 'solveP3P(objectPoints, imagePoints, cameraMatrix, distCoeffs, flags, rvecs=None, tvecs=None, /) -> retval, rvecs, tvecs', 'solvePnP(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec=None, tvec=None, useExtrinsicGuess=None, flags=None, /) -> retval, rvec, tvec', 'solvePnPGeneric(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvecs=None, tvecs=None, useExtrinsicGuess=None, flags=None, rvec=None, tvec=None, reprojectionError=None, /) -> retval, rvecs, tvecs, reprojectionError', 'solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec=None, tvec=None, useExtrinsicGuess=None, iterationsCount=None, reprojectionError=None, confidence=None, inliers=None, flags=None, /) -> retval, rvec, tvec, inliers', 'solvePnPRefineLM(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, criteria=None, /) -> rvec, tvec', 'solvePnPRefineVVS(objectPoints, imagePoints, cameraMatrix, distCoeffs, rvec, tvec, criteria=None, VVSlambda=None, /) -> rvec, tvec', 'solvePoly(coeffs, roots=None, maxIters=None, /) -> retval, roots', 'sort(src, flags, dst=None, /) -> dst', 'sortIdx(src, flags, dst=None, /) -> dst', 'SparseOpticalFlow()', 'SparsePyrLKOpticalFlow()', 'SparsePyrLKOpticalFlow_create(, winSize=None, maxLevel=None, crit=None, flags=None, minEigThreshold=None, /) -> retval', 'spatialGradient(src, dx=None, dy=None, ksize=None, borderType=None, /) -> dx, dy', 'split(m, mv=None, /) -> mv', 'sqrBoxFilter(src, ddepth, ksize, dst=None, anchor=None, normalize=None, borderType=None, /) -> dst', 'sqrt(src, dst=None, /) -> dst', 'startWindowThread() -> retval', 'StereoBM()', 'StereoBM_create(, numDisparities=None, blockSize=None, /) -> retval', 'stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R=None, T=None, E=None, F=None, flags=None, criteria=None, /) -> retval, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, R, T, E, F', 'stereoCalibrateExtended(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, E=None, F=None, perViewErrors=None, flags=None, criteria=None, /) -> retval, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, R, T, E, F, perViewErrors', 'StereoMatcher()', 'stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T, R1=None, R2=None, P1=None, P2=None, Q=None, flags=None, alpha=None, newImageSize=None, /) -> R1, R2, P1, P2, Q, validPixROI1, validPixROI2', 'stereoRectifyUncalibrated(points1, points2, F, imgSize, H1=None, H2=None, threshold=None, /) -> retval, H1, H2', 'StereoSGBM()', 'StereoSGBM_create(, minDisparity=None, numDisparities=None, blockSize=None, P1=None, P2=None, disp12MaxDiff=None, preFilterCap=None, uniquenessRatio=None, speckleWindowSize=None, speckleRange=None, mode=None, /) -> retval', 'Stitcher()', 'Stitcher_create(, mode=None, /) -> retval', 'stylization(src, dst=None, sigma_s=None, sigma_r=None, /) -> dst', 'Subdiv2D()', 'subtract(src1, src2, dst=None, mask=None, dtype=None, /) -> dst', 'sumElems(src, /) -> retval', 'SVBackSubst(w, u, vt, rhs, dst=None, /) -> dst', 'SVDecomp(src, w=None, u=None, vt=None, flags=None, /) -> w, u, vt', 'textureFlattening(src, mask, dst=None, low_threshold=None, high_threshold=None, kernel_size=None, /) -> dst', 'threshold(src, thresh, maxval, type, dst=None, /) -> retval, dst', 'TickMeter()', 'Tonemap()', 'TonemapDrago()', 'TonemapMantiuk()', 'TonemapReinhard()', 'trace(mtx, /) -> retval', 'transform(src, m, dst=None, /) -> dst', 'transpose(src, dst=None, /) -> dst', 'triangulatePoints(projMatr1, projMatr2, projPoints1, projPoints2, points4D=None, /) -> points4D', 'UMat()', 'UMat_context() -> retval', 'UMat_queue() -> retval', 'undistort(src, cameraMatrix, distCoeffs, dst=None, newCameraMatrix=None, /) -> dst', 'undistortPoints(src, cameraMatrix, distCoeffs, dst=None, R=None, P=None, /) -> dst', 'undistortPointsIter(src, cameraMatrix, distCoeffs, R, P, criteria, dst=None, /) -> dst', 'useOpenVX() -> retval', 'useOptimized() -> retval', 'cv2.utils()', 'validateDisparity(disparity, cost, minDisparity, numberOfDisparities, disp12MaxDisp=None, /) -> disparity', 'VariationalRefinement()', 'VariationalRefinement_create() -> retval', 'vconcat(src, dst=None, /) -> dst', 'VideoCapture()', 'cv2.videoio_registry()', 'VideoWriter()', 'VideoWriter_fourcc(c1, c2, c3, c4, /) -> retval', 'waitKey(, delay=None, /) -> retval', 'waitKeyEx(, delay=None, /) -> retval', 'warpAffine(src, M, dsize, dst=None, flags=None, borderMode=None, borderValue=None, /) -> dst', 'WarperCreator()', 'warpPerspective(src, M, dsize, dst=None, flags=None, borderMode=None, borderValue=None, /) -> dst', 'warpPolar(src, dsize, center, maxRadius, flags, dst=None, /) -> dst', 'watershed(image, markers, /) -> markers', 'writeOpticalFlow(path, flow, /) -> retval', '__doc__', '__file__', 'ExtensionFileLoader()', '__name__', '__package__', 'ModuleSpec(may, /)', "str(object='', /) -> str"], 'PyQt5': ['pandas', 'parser()', 'parso', 'pathlib', 'pdb', 'pickle', 'pickletools', 'pip', 'pipes', 'pkg_resources', 'pkgutil', 'plat-aix4', 'plat-darwin', 'plat-freebsd4', 'plat-freebsd5', 'plat-freebsd6', 'plat-freebsd7', 'plat-freebsd8', 'plat-generic', 'plat-linux', 'plat-netbsd1', 'plat-next3', 'plat-sunos5', 'plat-unixware7', 'platform', 'plistlib', 'plugin', 'poplib', 'posixpath', 'pprint', 'profile', 'properties', 'pstats', 'pty', 'py_compile', 'pyclbr', 'pydoc', 'pydoc_data', 'pyexpat', 'PyQt5', 'pytz'], 'matplotlib': ['afm', 'animation', 'artist', 'atexit', 'axes', 'axis', 'backend_bases', 'backend_managers', 'backend_tools', 'backends', 'bezier', 'blocking_input', 'category', 'cbook', 'checkdep_dvipng()', 'checkdep_ghostscript()', 'checkdep_inkscape()', 'checkdep_pdftops()', 'checkdep_ps_distiller(s)', 'checkdep_usetex(s)', 'cm', 'collections', 'colorbar', 'colors', 'compare_versions(a, b)', 'compat', 'container', 'contextlib', 'contour', 'cycler', 'dates', 'dateutil', 'dedent(s)', 'default_test_modules', 'defaultParams', 'distutils', 'docstring', 'dviread', 'figure', 'font_manager', 'fontconfig_pattern', 'matplotlib.ft2font()', 'functools', 'get_backend()', 'get_cachedir()', 'get_configdir()', 'get_data_path()', 'get_home()', 'get_label(y, default_name)', 'get_py2exe_datafiles()', 'gridspec', 'hatch', 'image', 'importlib', 'inspect', 'interactive(b)', 'io', 'is_interactive()', 'is_url(filename)', 'legend', 'legend_handler', 'lines', 'locale', 'logging', 'markers', 'mathtext', 'matplotlib_fname()', 'MatplotlibDeprecationWarning', 'mlab', 'mplDeprecation', 'MutableMapping()', 'numpy', 'offsetbox', 'os', 'Parameter', 'patches', 'Path()', 'path', 'patheffects', 'pprint', 'projections', 'pylab', 'pyparsing', 'pyplot', 'quiver', 'rc', 'rc_context(rc=None, fname=None)', 'rc_file(fname)', 'rc_file_defaults()', 'rc_params(fail_on_error=False)', 'rc_params_from_file(fname, fail_on_error=False, use_default_template=True)', 'rcdefaults()', 'RcParams', 'rcParams', 'rcParamsDefault', 'rcParamsOrig', 'rcsetup', 're', 'sanitize_sequence(data)', 'sankey', 'scale', 'shutil', 'sphinxext', 'spines', 'stackplot', 'stat', 'streamplot', 'style', 'subprocess', 'sys', 'table', 'tempfile', 'test', 'testing', 'tests', 'texmanager', 'text', 'textpath', 'ticker', 'tight_bbox', 'tight_layout', 'tk_window_focus()', 'transforms', 'tri', 'matplotlib.ttconv()', 'type1font', 'units', 'URL_REGEX', 'urllib', 'use(arg, warn=False, force=True)', 'validate_backend(s)', 'Verbose()', 'verbose', 'warnings', 'widgets', '_add_data_doc(docstring, replace_names, replace_all_args)', '_all_deprecated', '_animation_data', '_basedir', '_cm', '_cm_listed', '_color_data', '_constrained_layout', 'matplotlib._contour()', '_create_tmp_config_dir()', '_DATA_DOC_APPENDIX', '_deprecated_ignore_map', '_deprecated_map', '_deprecated_remain_as_none', '_error_details_fmt', '_fname', '_fullpath', '_get_config_or_cache_dir(xdg_base)', '_get_data_path()', '_get_xdg_cache_dir()', '_get_xdg_config_dir()', 'matplotlib._image()', '_init_tests()', '_layoutbox', '_log', '_logged_cached(fmt, func=None)', '_mathtext_data', '_open_file_or_url(fname)', '_parse_commandline()', 'matplotlib._path()', 'matplotlib._png()', '_preprocess_data(replace_names=None, replace_all_args=False, label_namer=None, positional_parameter_names=None)', '_pylab_helpers', 'qhull()', '_rc_params_in_file(fname, fail_on_error=False)', '_replacer(data, key)', "_set_logger_verbose_level(level_str='silent', file_str='sys.stdout')", 'matplotlib._tri()', '_verbose_msg', '_version', '__bibtex__', '__doc__', '__file__', '__name__', '__package__', '__version__', '__version__numpy__'], 'numpy': ['abs', 'absolute', 'absolute_import', 'add', 'add_docstring(obj, docstring, /)', 'add_newdoc(place, obj, doc, warn_on_python=True)', '_add_newdoc_ufunc(ufunc, new_docstring, /)', 'alen(a)', 'all(a, axis=None, out=None, keepdims=np._NoValue)', 'allclose(a, b, rtol=1.e-5, atol=1.e-8, equal_nan=False)', 'int(x=None, /) -> int', 'alltrue', 'allTypes', 'amax(a, axis=None, out=None, keepdims=np._NoValue, initial=np._NoValue, where=np._NoValue)', 'amin(a, axis=None, out=None, keepdims=np._NoValue, initial=np._NoValue, where=np._NoValue)', 'angle(z, deg=False)', 'any(a, axis=None, out=None, keepdims=np._NoValue)', 'append(arr, values, axis=None)', 'apply_along_axis', 'apply_over_axes(func, a, axes)', 'arange(start=None, stop, step=None, , dtype=None, /)', 'arccos', 'arccosh', 'arcsin', 'arcsinh', 'arctan', 'arctan2', 'arctanh', 'argmax(a, axis=None, out=None)', 'argmin(a, axis=None, out=None)', "argpartition(a, kth, axis=-1, kind='introselect', order=None)", 'argsort(a, axis=-1, kind=None, order=None)', 'argwhere(a)', 'around(a, decimals=0, out=None)', "array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0, /)", 'array2string', 'array_equal(a1, a2)', 'array_equiv(a1, a2)', 'array_function_dispatch(dispatcher, verify=True, docs_from_dispatcher=False)', 'ARRAY_FUNCTION_ENABLED', 'array_precision', 'array_repr(arr, max_line_width=None, precision=None, suppress_small=None)', 'array_split(ary, indices_or_sections, axis=0)', 'array_str(a, max_line_width=None, precision=None, suppress_small=None)', 'array_type', 'arrayprint', 'as_strided(x, shape=None, strides=None, subok=False, writeable=True)', 'asanyarray(a, dtype=None, order=None)', 'asarray(a, dtype=None, order=None)', 'asarray_chkfinite(a, dtype=None, order=None)', 'asbytes(s)', 'ascontiguousarray(a, dtype=None)', 'asfarray(a, dtype=_nx.float_)', 'asfortranarray(a, dtype=None)', 'asmatrix(data, dtype=None)', 'asscalar(a)', 'str(o: object=...)', 'ast', 'asunicode(s)', 'atleast_1d', 'atleast_2d', 'atleast_3d', 'average(a, axis=None, weights=None, returned=False)', 'AxisConcatenator(axis=0, matrix=False, ndmin=1, trans1d=-1)', 'AxisError(axis, ndim=None, msg_prefix=None)', 'BagObj(obj)', 'bartlett(M)', 'base_repr(number, base=2, padding=0)', 'binary_repr(num, width=None)', 'bincount(x, weights=None, minlength=0, /)', 'bitname(obj)', 'bitwise_and', 'bitwise_not', 'bitwise_or', 'bitwise_xor', 'blackman(M)', 'block(arrays)', 'bmat(obj, ldict=None, gdict=None)', 'bool', 'bool_', 'BoolFormat', 'broadcast(1=None, 2=None, 3=None, /)', 'broadcast_arrays', 'broadcast_to(array, shape, subok=False)', 'builtins', "busday_count(begindates, enddates, weekmask='1111100', holidays=[], busdaycal=None, out=None, /)", "busday_offset(dates, offsets, roll='raise', weekmask='1111100', holidays=None, busdaycal=None, out=None, /)", "busdaycalendar(weekmask='1111100', holidays=None, /)", 'byte_bounds(a)', 'bytes(ints: Iterable[int])', 'c_', 'c_einsum', "can_cast(from_, to, casting='safe', /)", 'cast', 'cbrt', 'CClass()', 'ceil', 'char', 'chararray', "choose(a, choices, out=None, mode='raise')", 'clip', 'collections_abc', 'column_stack(tup)', 'common_type', 'compare_chararrays(a, b, cmp_op, rstrip, /)', 'compat', 'interp()', 'interp_complex()', 'complex', 'complex_', 'ComplexFloatingFormat', 'ComplexWarning', 'compress(condition, a, axis=None, out=None)', 'concatenate((a1, a2, ...), axis=0, out=None, /)', 'conftest', 'conj', 'conjugate', 'contextlib', 'contextlib_nullcontext(enter_result=None)', 'ConversionWarning', 'ConverterError', 'ConverterLockError', "convolve(a, v, mode='full')", "copy(a, order='K')", 'copysign', "copyto(dst, src, casting='same_kind', where=True, /)", 'core', 'corrcoef(x, y=None, rowvar=True, bias=np._NoValue, ddof=np._NoValue)', 'correlate(a, v, mode=0, /)', 'correlate2()', 'cos', 'cosh', 'count_nonzero()', 'Counter', 'cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None)', 'cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None)', 'ctypeslib', 'cumprod(a, axis=None, dtype=None, out=None)', 'cumproduct', 'cumsum(a, axis=None, dtype=None, out=None)', 'DataSource(destpath=os.curdir)', "datetime_as_string(arr, unit=None, timezone='naive', casting='same_kind', /)", 'datetime_data(dtype, /, /)', "DatetimeFormat(x, unit=None, timezone=None, casting='same_kind', legacy=False)", 'PyCapsule()', 'Decimal()', 'deg2rad', 'degrees', 'delete(arr, obj, axis=None)', 'deprecate', '<lambda>(msg)', 'diag(v, k=0)', 'diag_indices(n, ndim=2)', 'diag_indices_from(arr)', 'diagflat(v, k=0)', 'diagonal(a, offset=0, axis1=0, axis2=1)', 'diff(a, n=1, axis=-1, prepend=np._NoValue, append=np._NoValue)', 'digitize(x, bins, right=False)', 'disp(mesg, device=None, linefeed=True)', 'distutils', 'divide', 'division', 'divmod', 'doc', 'dot(a, b, out=None, /)', 'dragon4_positional()', 'dragon4_scientific()', 'dsplit(ary, indices_or_sections)', 'dstack(tup)', 'dtype(obj, align=False, copy=False, /)', 'dtype_is_implied(dtype)', 'dtype_short_repr(dtype)', 'dual', 'DummyArray(interface, base=None)', 'float()', 'easy_dtype', 'ediff1d(ary, to_end=None, to_begin=None)', 'eigvals(a)', 'einsum', 'einsum_path', 'einsum_symbols', 'einsum_symbols_set', 'einsumfunc', 'emath', "empty(shape, dtype=float, order='C', /)", "empty_like(prototype, dtype=None, order='K', subok=True, shape=None, /)", 'english_capitalize(s)', 'english_lower(s)', 'english_upper(s)', 'equal', 'Exception()', 'errstate', 'exc', 'exp', 'exp2', 'expand_dims(a, axis)', 'expm1', 'extend_all(module)', 'extract(condition, arr)', "eye(N, M=None, k=0, dtype=float, order='C')", 'f2py', 'fabs', 'False_', '_fastCopyAndTranspose(a, /)', 'fft', 'fill_diagonal(a, val, wrap=False)', 'find_common_type(array_types, scalar_types)', 'find_duplicate(list)', 'finfo()', 'fix(x, out=None)', 'flagsobj()', 'flatiter()', 'flatnonzero(a)', 'flatten_dtype(ndtype, flatten_base=False)', 'flexible', 'flip(m, axis=None)', 'fliplr(m)', 'flipud(m)', 'float', 'float_', 'float_power', 'FloatingFormat', 'floor', 'floor_divide', 'fmax', 'fmin', 'fmod', 'format', "format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None)", "format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None)", 'format_longfloat()', 'format_parser(formats, names, titles, aligned=False, byteorder=None)', 'formatargspec', 'frexp', 'fromarrays(arrayList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None)', 'frombuffer(buffer, dtype=float, count=_1, offset=0, /)', "fromfile(file, dtype=float, count=_1, sep='', offset=0, /)", 'fromfunction', 'fromiter(iterable, dtype, count=_1, /)', 'fromnumeric', 'frompyfunc(func, nin, nout, /)', 'fromrecords(recList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None)', 'fromregex(file, regexp, dtype, encoding=None)', "fromstring(string, dtype=float, count=_1, sep='', /)", "full(shape, fill_value, dtype=None, order='C')", "full_like(a, fill_value, dtype=None, order='K', subok=True, shape=None)", 'function_base', 'functools', "fv(rate, nper, pmt, pv, when='end')", 'gcd', 'generic', 'genericTypeRank', 'genfromtxt(fname, dtype=float, comments=\'#\', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=\'\'.join(sorted(NameValidator.defaultdeletechars)), replace_space=\'_\', autostrip=False, case_sensitive=True, defaultfmt="f%i", unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding=\'bytes\')', 'geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0)', 'get_array_prepare', 'get_array_wrap', 'get_ident', 'get_include()', 'get_printoptions()', 'get_remaining_size(fd)', 'getargspec(func)', 'getbuffer', 'getbufsize()', 'geterr()', 'geterrcall()', 'geterrobj()', 'getlimits', 'gradient', 'greater', 'greater_equal', 'hamming(M)', 'hanning(M)', 'has_nested_fields(ndtype)', 'heaviside', 'histogram(a, bins=10, range=None, normed=None, weights=None, density=None)', 'histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None)', 'histogram_bin_edges(a, bins=10, range=None, weights=None)', 'histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None)', 'hsplit(ary, indices_or_sections)', 'hstack(tup)', 'hypot', 'i0(x)', 'i1', 'i2', 'i4', 'identity(n, dtype=None)', 'iinfo(int_type)', 'imag(val)', 'implement_array_function', 'in1d(ar1, ar2, assume_unique=False, invert=False)', 'index_exp', 'IndexExpression(maketuple)', 'indices(dimensions, dtype=int, sparse=False)', "info(object=None, maxwidth=76, output=sys.stdout, toplevel='numpy')", 'inner(a, b, /)', 'insert(arr, obj, values, axis=None)', 'int', 'int16', 'int32', 'int64', 'int8', 'int_', 'int_asbuffer()', 'intc', 'integer', 'IntegerFormat(data)', 'intersect1d(ar1, ar2, assume_unique=False, return_indices=False)', 'intp', 'inv(a)', 'invert', "ipmt(rate, per, nper, pv, fv=0, when='end')", 'irr(values)', "is_busday(dates, weekmask='1111100', holidays=None, busdaycal=None, out=None, /)", 'is_pathlib_path(obj)', 'isclose(a, b, rtol=1.e-5, atol=1.e-8, equal_nan=False)', 'iscomplex(x)', 'iscomplexobj(x)', 'isfileobj(f)', 'isfinite', 'isfortran(a)', 'isin(element, test_elements, assume_unique=False, invert=False)', 'isinf', 'isnan', 'isnat', 'isneginf(x, out=None)', 'isposinf(x, out=None)', 'isreal(x)', 'isrealobj(x)', 'isscalar(element)', 'issctype(rep)', 'issubclass_(arg1, arg2)', 'issubdtype(arg1, arg2)', 'issubsctype(arg1, arg2)', 'itemgetter(item: Any) -> Callable[[Any], Any]', 'iterable(y)', 'itertools', 'ix_', 'kaiser(M, beta)', 'kron(a, b)', 'lcm', 'ldexp', 'left_shift', 'less', 'less_equal', 'lexsort(keys, axis=_1, /)', 'lib', 'linalg', "LineSplitter(delimiter=None, comments='#', autostrip=True, encoding=None)", 'linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0)', 'bool(x, /) -> bool', "load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII')", 'loads', "loadtxt(fname, dtype=float, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None)", 'log', 'log10', 'log1p', 'log2', 'logaddexp', 'logaddexp2', 'logical_and', 'logical_not', 'logical_or', 'logical_xor', 'logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None, axis=0)', 'int(x: Union[Text, bytes, SupportsInt, _SupportsIndex]=...)', 'longlong', 'lookfor(what, module=None, import_modules=True, regenerate=False, output=None)', 'LOWER_TABLE', 'lstsq(a, b, rcond="warn")', 'ma', "MachAr(float_conv=float, int_conv=int, float_to_float=float, float_to_str=lambda v:'%24.16e' % v, title='Python floating point number')", 'machar', 'MachArLike', 'mafromtxt', 'map', 'Mapping()', 'mask_indices(n, mask_func, k=0)', 'math', 'matlib', 'matmul', 'matrix', 'matrix_power(a, n)', 'matrixlib', 'maximum', 'maximum_sctype(t)', 'may_share_memory(a, b, max_work=None, /)', 'mean(a, axis=None, dtype=None, out=None, keepdims=np._NoValue)', 'median(a, axis=None, out=None, overwrite_input=False, keepdims=False)', 'memmap', 'meshgrid', 'mgrid', 'MGridClass()', 'min_scalar_type(a, /)', 'minimum', "mintypecode(typechars, typeset='GDFgdf', default='d')", 'mirr(values, finance_rate, reinvest_rate)', 'mixins', 'mod', 'mode_equivalents', 'modf', 'ModuleDeprecationWarning', 'moveaxis(a, source, destination)', 'msg', 'msort(a)', 'mu', 'multiarray', 'multiply', 'N', "NameValidator(excludelist=None, deletechars=None, case_sensitive=None, replace_space='_')", 'nan_to_num(x, copy=True, nan=0.0, posinf=None, neginf=None)', 'nanargmax(a, axis=None)', 'nanargmin(a, axis=None)', 'nancumprod(a, axis=None, dtype=None, out=None)', 'nancumsum(a, axis=None, dtype=None, out=None)', 'nanmax(a, axis=None, out=None, keepdims=np._NoValue)', 'nanmean(a, axis=None, dtype=None, out=None, keepdims=np._NoValue)', 'nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=np._NoValue)', 'nanmin(a, axis=None, out=None, keepdims=np._NoValue)', "nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=np._NoValue)", 'nanprod(a, axis=None, dtype=None, out=None, keepdims=np._NoValue)', "nanquantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=np._NoValue)", 'nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue)', 'nansum(a, axis=None, dtype=None, out=None, keepdims=np._NoValue)', 'nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue)', 'nbytes', 'nd_grid(sparse=False)', 'ndarray(shape, dtype=float, buffer=None, offset=0, strides=None, order=None, /)', 'ndenumerate(arr)', 'ndfromtxt', 'ndim(a)', 'ndindex', 'nditer(s, /)', 'negative', 'nested_iters(s, /)', 'NoneType()', 'newbuffer', 'nextafter', 'nonzero(a)', 'normalize_axis_index(axis, ndim, msg_prefix=None, /)', 'normalize_axis_tuple(axis, ndim, argname=None, allow_duplicate=False)', 'not_equal', 'np', "nper(rate, pmt, pv, fv=0, when='end')", 'npv(rate, values)', 'NpzFile(fid, own_fid=False, allow_pickle=False, pickle_kwargs=None)', 'nt', 'ntypes', 'numarray', 'numbers', 'numeric', 'numerictypes', 'numfmt', 'NumpyVersion(vstring)', 'nx', 'NX', 'obj2sctype(rep, default=None)', 'object', 'ogrid', 'OGridClass()', 'oldnumeric', "ones(shape, dtype=None, order='C')", "ones_like(a, dtype=None, order='K', subok=True, shape=None)", 'operator', 'index(a: Any) -> int', 'OrderedDict', 'os', 'os_fspath(path)', 'os_PathLike()', 'outer(a, b, out=None)', 'overrides', "packbits(a, axis=None, bitorder='big', /)", 'pad', "partition(a, kth, axis=-1, kind='introselect', order=None)", 'path', "percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False)", 'pickle', 'piecewise', 'place(arr, mask, vals)', "pmt(rate, nper, pv, fv=0, when='end')", 'poly(seq_of_zeros)', 'poly1d(c_or_r, r=False, variable=None)', 'polyadd(a1, a2)', 'polyder(p, m=1)', 'polydiv(u, v)', 'polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)', 'polyint(p, m=1, k=None)', 'polymul(a1, a2)', 'polynomial', 'polysub(a1, a2)', 'polyval(p, x)', 'positive', 'power', "ppmt(rate, per, nper, pv, fv=0, when='end')", 'print_function', 'printoptions', 'prod(a, axis=None, dtype=None, out=None, keepdims=np._NoValue, initial=np._NoValue, where=np._NoValue)', 'product', 'promote_types(type1, type2, /)', 'ptp(a, axis=None, out=None, keepdims=np._NoValue)', "put(a, ind, v, mode='raise')", 'put_along_axis(arr, indices, values, axis)', 'putmask(a, mask, values, /)', "pv(rate, nper, pmt, fv=0, when='end')", "quantile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False)", 'r_', 'rad2deg', 'radians', 'random', 'range', 'RankWarning', "rate(nper, pmt, pv, fv, when='end', guess=None, tol=None, maxiter=100)", "ravel(a, order='C')", "ravel_multi_index(multi_index, dims, mode='raise', order='C', /)", 'RClass()', 're', 'real(val)', 'real_if_close(a, tol=100)', 'rec', 'recarray', 'recfromcsv', 'recfromtxt', 'reciprocal', 'record', 'recursive(func)', 'remainder', 'repeat(a, repeats, axis=None)', 'repr_format(x)', 'require(a, dtype=None, requirements=None)', "reshape(a, newshape, order='C')", 'resize(a, new_shape)', 'result_type', 'right_shift', 'rint', 'roll(a, shift, axis=None)', 'rollaxis(a, axis, start=0)', 'roots(p)', 'rot90(m, k=1, axes=(0,1))', 'round_(a, decimals=0, out=None)', 'vstack(tup)', 's_', 'safe_eval(source)', 'save(file, arr, allow_pickle=True, fix_imports=True)', "savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\\n', header='', footer='', comments='# ', encoding=None)", 'savez', 'savez_compressed', 'sb', 'scalar(dtype, obj, /)', 'ScalarType', 'sctype2char(sctype)', 'sctypeDict', 'sctypeNA', 'sctypes', "searchsorted(a, v, side='left', sorter=None)", 'select(condlist, choicelist, default=0)', 'set_datetimeparse_function()', 'set_legacy_print_mode()', 'set_module(module)', 'set_numeric_ops(op1=func1, op2=func2, ..., /)', 'set_printoptions', 'set_string_function(f, repr=1, /)', 'set_typeDict(dict, /)', 'setbufsize(size)', 'setdiff1d(ar1, ar2, assume_unique=False)', 'seterr(all=None, divide=None, over=None, under=None, invalid=None)', 'seterrcall(func)', 'seterrobj(errobj, /)', 'setup', 'setxor1d(ar1, ar2, assume_unique=False)', 'shape(a)', 'shape_base', 'shares_memory(a, b, max_work=None, /)', 'show()', 'sign', 'signbit', 'sin', 'sinc(x)', 'sinh', 'size(a, axis=None)', 'sometrue', 'sort(a, axis=-1, kind=None, order=None)', 'sort_complex(a)', 'source(object, output=sys.stdout)', 'spacing', 'split(ary, indices_or_sections, axis=0)', 'sqrt', 'square', 'squeeze(a, axis=None)', 'stack(arrays, axis=0, out=None)', 'std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue)', 'str', 'str_format(x)', 'StringConverter(dtype_or_func=None, default=None, missing_values=None, locked=False)', 'StructuredVoidFormat(format_functions)', 'SubArrayFormat(format_function)', 'subtract', 'sum(a, axis=None, dtype=None, out=None, keepdims=np._NoValue, initial=np._NoValue, where=np._NoValue)', 'swapaxes(a, axis1, axis2)', 'sys', "take(a, indices, axis=None, out=None, mode='raise')", 'take_along_axis(arr, indices, axis)', 'tan', 'tanh', 'tensordot(a, b, axes=2)', "PytestTester(label='fast', verbose=1, extra_argv=None, doctests=False, coverage=False, durations=-1, tests=None)", 'test_interrupt()', 'NoseTester(package=None, raise_warnings="release", depth=0, check_fpu_mode=False)', 'testing', 'tests', 'tile(A, reps)', 'TimedeltaFormat(data)', 'TooHardError', 'trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None)', 'transpose(a, axes=None)', 'trapz(y, x=None, dx=1.0, axis=-1)', 'tri(N, M=None, k=0, dtype=float)', 'tril(m, k=0)', 'tril_indices(n, k=0, m=None)', 'tril_indices_from(arr, k=0)', "trim_zeros(filt, trim='fb')", 'triu(m, k=0)', 'triu_indices(n, k=0, m=None)', 'triu_indices_from(arr, k=0)', 'True_', 'true_divide', 'trunc', 'typecodes', 'typeDict', 'dict() -> empty dictionary()', 'typeinforanged(iterable=(), /)', 'typeNA', 'typename(char)', 'types', 'ufunc()', "str(object='', /) -> str", 'uint8', 'um', 'umath', 'unicode', 'union1d(ar1, ar2)', 'unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None)', "unpackbits(a, axis=None, count=None, bitorder='big', /)", "unravel_index(indices, shape, order='C', /)", 'unwrap(p, discont=pi, axis=-1)', 'UPPER_TABLE', 'valid_filemodes', 'vander(x, N=None, increasing=False)', 'var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=np._NoValue)', 'vdot(a, b, /)', 'vectorize(pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None)', 'version', 'VisibleDeprecationWarning', 'vsplit(ary, indices_or_sections)', 'warnings', 'weakref', 'where(condition, x=None, y=None, /)', 'who(vardict=None)', 'writeable_filemodes', "zeros(shape, dtype=float, order='C', /)", "zeros_like(a, dtype=None, order='K', subok=True, shape=None)", 'zipfile_factory', '_accumulate(values)', '_add_docstring(obj, doc, warn_on_python)', '_add_newdocs', '_alen_dispathcer(a)', '_alignment', '_all_dispatcher(a, axis=None, out=None, keepdims=None)', '_allclose_dispatcher(a, b, rtol=None, atol=None, equal_nan=None)', '_amax_dispatcher(a, axis=None, out=None, keepdims=None, initial=None, where=None)', '_amin_dispatcher(a, axis=None, out=None, keepdims=None, initial=None, where=None)', '_angle_dispatcher(z, deg=None)', '_any_dispatcher(a, axis=None, out=None, keepdims=None)', '_append_dispatcher(arr, values, axis=None)', '_apply_along_axis_dispatcher', '_apply_over_axes_dispatcher(func, a, axes)', '_arg', '_argmax_dispatcher(a, axis=None, out=None)', '_argmin_dispatcher(a, axis=None, out=None)', '_argpartition_dispatcher(a, kth, axis=None, kind=None, order=None)', '_argsort_dispatcher(a, axis=None, kind=None, order=None)', '_ARGUMENT', '_ARGUMENT_LIST', '_argwhere_dispatcher(a)', '_around_dispatcher(a, decimals=None, out=None)', '_array2string(a, options, separator=\' \', prefix="")', '_array2string_dispatcher', '_array2string_impl', '_array_equal_dispatcher(a1, a2)', '_array_equiv_dispatcher(a1, a2)', '_array_repr_dispatcher(arr, max_line_width=None, precision=None, suppress_small=None)', '_array_repr_implementation(arr, max_line_width=None, precision=None, suppress_small=None, array2string=array2string)', '_array_split_dispatcher(ary, indices_or_sections, axis=None)', '_array_str_dispatcher(a, max_line_width=None, precision=None, suppress_small=None)', '_array_str_implementation(a, max_line_width=None, precision=None, suppress_small=None, array2string=array2string)', '_arrays_for_stack_dispatcher(arrays, stacklevel=4)', '_as_pairs(x, ndim, as_index=False)', '_asarray', '_asfarray_dispatcher(a, dtype=None)', '_asscalar_dispatcher(a)', '_atleast_1d_dispatcher', '_atleast_2d_dispatcher', '_atleast_3d_dispatcher', '_atleast_nd(a, ndim)', '_average_dispatcher(a, axis=None, weights=None, returned=None)', '_binary_op_dispatcher(a1, a2)', '_bits_of(obj)', '_block(arrays, max_depth, result_ndim, depth=0)', '_block_check_depths_match(arrays, parent_index=[])', '_block_concatenate(arrays, list_ndim, result_ndim)', '_block_dispatcher(arrays)', '_block_format_index(index)', '_block_info_recursion(arrays, max_depth, result_ndim, depth=0)', '_block_setup(arrays)', '_block_slicing(arrays, list_ndim, result_ndim)', '_broadcast_arrays_dispatcher', '_broadcast_shape', '_broadcast_to(array, shape, subok, readonly)', '_broadcast_to_dispatcher(array, shape, subok=None)', '_byteorderconv', '_calculate_shapes(broadcast_shape, dim_sizes, list_of_core_dims)', '_can_coerce_all(dtypelist, start=0)', '_can_dot(inputs, result, idx_removed)', '_chbevl(x, vals)', '_choose_dispatcher(a, choices, out=None, mode=None)', '_clip_dispatcher', '_column_stack_dispatcher(tup)', '_common_type_dispatcher', '_compress_dispatcher(condition, a, axis=None, out=None)', '_compute_size_by_dict(indices, idx_dict)', '_concatenate', '_concatenate_shapes(shapes, axis)', '_concrete_typeinfo', '_concrete_types', '_construct_lookups()', '_convert_from_string(data)', '_convert_to_float', '_convert_when(when)', '_convolve_dispatcher(a, v, mode=None)', '_copy_dispatcher(a, order=None)', '_copyto(a, val, mask)', '_CORE_DIMENSION_LIST', '_corrcoef_dispatcher(x, y=None, rowvar=None, bias=None, ddof=None)', '_correlate_dispatcher(a, v, mode=None)', '_count_nonzero_dispatcher(a, axis=None)', '_cov_dispatcher(m, y=None, rowvar=None, bias=None, ddof=None, fweights=None, aweights=None)', '_create_arrays(broadcast_shape, dim_sizes, list_of_core_dims, dtypes)', '_cross_dispatcher(a, b, axisa=None, axisb=None, axisc=None, axis=None)', '_cumprod_dispatcher(a, axis=None, dtype=None, out=None)', '_cumsum_dispatcher(a, axis=None, dtype=None, out=None)', '_decode_line(line, encoding=None)', '_array_repr_implementation(arr, max_line_width=None, precision=None, suppress_small=None)', '_array_str_implementation(a, max_line_width=None, precision=None, suppress_small=None)', '_delete_dispatcher(arr, obj, axis=None)', '_Deprecate(old_name=None, new_name=None, message=None)', '_deprecate_out_named_y(f)', '_diag_dispatcher(v, k=None)', '_diag_indices_from(arr)', '_diagonal_dispatcher(a, offset=None, axis1=None, axis2=None)', '_diff_dispatcher(a, n=None, axis=None, prepend=None, append=None)', '_digitize_dispatcher(x, bins, right=None)', '_DIMENSION_NAME', '_discovered_machar(ftype)', '_dispatcher(x, out=None)', '_distributor_init', '_divide_by_count(a, b, out=None)', '_dstack_dispatcher(tup)', '_dtype', '_dtype_ctypes', '_ediff1d_dispatcher(ary, to_end=None, to_begin=None)', '_einsum_dispatcher', '_einsum_path_dispatcher', '_errdict', '_errdict_rev', '_expand_dims_dispatcher(a, axis)', '_extendLine(s, line, word, line_width, next_line_prefix, legacy)', '_extract_dispatcher(condition, arr)', '_fill_diagonal_dispatcher(a, val, wrap=None)', '_find_common_coerce(a, b)', '_find_contraction(positions, input_sets, output_set)', '_fix_and_maybe_deprecate_out_named_y(f)', '_fix_out_named_y(f)', '_flatnonzero_dispatcher(a)', '_flip_dispatcher(m, axis=None)', '_float_ma', '_flop_count(idx_contraction, inner, num_terms, size_dictionary)', '_format_options', '_formatArray(a, format_function, line_width, next_line_prefix, separator, edge_items, summary_insert, legacy)', '_fr0(a)', '_fr1(a)', '_from_nx', '_from_string(str, gdict, ldict)', '_frombuffer(buf, dtype, shape, order)', '_full_like_dispatcher(a, fill_value, dtype=None, order=None, subok=None, shape=None)', '_function_signature_re', '_fv_dispatcher(rate, nper, pmt, pv, when=None)', '_g_div_gp(r, n, p, x, y, w)', 'GeneratorType()', '_geomspace_dispatcher(start, stop, num=None, endpoint=None, dtype=None, axis=None)', '_get_bin_edges(a, bins, range, weights)', '_get_edges(padded, axis, width_pair)', '_get_format_function', '_get_formatdict', '_get_implementing_args()', '_get_indent(lines)', '_get_linear_ramps(padded, axis, width_pair, end_value_pair)', '_get_machar(ftype)', '_get_ndarray_c_version()', '_get_outer_edges(a, range)', '_get_stats(padded, axis, width_pair, length_pair, stat_func)', '_getconv(dtype)', '_getmaxmin(t)', '_getmembers(item)', '_globals', '_gradient_dispatcher', '_greedy_path(input_sets, output_set, idx_dict, memory_limit)', '_guarded_repr_or_str(v)', '_hist_bin_auto(x, range)', '_hist_bin_doane(x, range)', '_hist_bin_fd(x, range)', '_hist_bin_rice(x, range)', '_hist_bin_scott(x, range)', '_hist_bin_selectors', '_hist_bin_sqrt(x, range)', '_hist_bin_stone(x, range)', '_hist_bin_sturges(x, range)', '_histogram2d_dispatcher(x, y, bins=None, range=None, normed=None, weights=None, density=None)', '_histogram_bin_edges_dispatcher(a, bins=None, range=None, weights=None)', '_histogram_dispatcher(a, bins=None, range=None, normed=None, weights=None, density=None)', '_histogramdd_dispatcher(sample, bins=None, range=None, normed=None, weights=None, density=None)', '_hvdsplit_dispatcher(ary, indices_or_sections)', '_i0_1(x)', '_i0_2(x)', '_i0_dispatcher(x)', '_i0A', '_i0B', '_imag_dispatcher(val)', '_in1d_dispatcher(ar1, ar2, assume_unique=None, invert=None)', '_info(obj, output=sys.stdout)', '_insert()', '_insert_dispatcher(arr, obj, values, axis=None)', '_internal', '_interp_dispatcher(x, xp, fp, left=None, right=None, period=None)', '_intersect1d_dispatcher(ar1, ar2, assume_unique=None, return_indices=None)', '_ipmt_dispatcher(rate, per, nper, pv, fv=None, when=None)', '_irr_dispatcher(values)', '_is_string_like(obj)', '_is_type_dispatcher(x)', '_isclose_dispatcher(a, b, rtol=None, atol=None, equal_nan=None)', '_isin_dispatcher(element, test_elements, assume_unique=None, invert=None)', '_ix__dispatcher', '_kind_list', '_kind_name(dtype)', '_KNOWN_TYPES', '_kron_dispatcher(a, b)', '_leading_trailing(a, edgeitems, index=())', '_linspace_dispatcher(start, stop, num=None, endpoint=None, retstep=None, dtype=None, axis=None)', '_loadtxt_chunksize', '_logspace_dispatcher(start, stop, num=None, endpoint=None, base=None, dtype=None, axis=None)', '_lookfor_caches', '_lookfor_generate_cache(module, import_modules, regenerate)', '_MACHAR_PARAMS', '_make_along_axis_idx(arr_shape, indices, axis)', '_make_options_dict(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, sign=None, formatter=None, floatmode=None, legacy=None)', "_makenamedict(module='numpy')", '_maketup(descr, val)', '_mat', '_maxvals', '_maybe_view_as_subclass(original_array, new_array)', '_mean_dispatcher(a, axis=None, dtype=None, out=None, keepdims=None)', '_median(a, axis=None, out=None, overwrite_input=False)', '_median_dispatcher(a, axis=None, out=None, overwrite_input=None, keepdims=None)', '_median_nancheck(data, result, axis, out)', '_meshgrid_dispatcher', '_methods', '_min_int(low, high)', '_minvals', '_mirr_dispatcher(values, finance_rate, reinvest_rate)', '_mode_from_name(mode)', '_mode_from_name_dict', '_monotonicity()', '_move_axis_to_0(a, axis)', '_moveaxis_dispatcher(a, source, destination)', '_msort_dispatcher(a)', 'numpy.core._multiarray_umath()', '_namefromtype', '_nan_mask(a, out=None)', '_nan_to_num_dispatcher(x, copy=None, nan=None, posinf=None, neginf=None)', '_nanargmax_dispatcher(a, axis=None)', '_nanargmin_dispatcher(a, axis=None)', '_nancumprod_dispatcher(a, axis=None, dtype=None, out=None)', '_nancumsum_dispatcher(a, axis=None, dtype=None, out=None)', '_nanmax_dispatcher(a, axis=None, out=None, keepdims=None)', '_nanmean_dispatcher(a, axis=None, dtype=None, out=None, keepdims=None)', '_nanmedian(a, axis=None, out=None, overwrite_input=False)', '_nanmedian1d(arr1d, overwrite_input=False)', '_nanmedian_dispatcher(a, axis=None, out=None, overwrite_input=None, keepdims=None)', '_nanmedian_small(a, axis=None, out=None, overwrite_input=False)', '_nanmin_dispatcher(a, axis=None, out=None, keepdims=None)', '_nanpercentile_dispatcher(a, q, axis=None, out=None, overwrite_input=None, interpolation=None, keepdims=None)', '_nanprod_dispatcher(a, axis=None, dtype=None, out=None, keepdims=None)', "_nanquantile_1d(arr1d, q, overwrite_input=False, interpolation='linear')", '_nanquantile_dispatcher(a, q, axis=None, out=None, overwrite_input=None, interpolation=None, keepdims=None)', "_nanquantile_unchecked(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=np._NoValue)", "_nanquantile_ureduce_func(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear')", '_nanstd_dispatcher(a, axis=None, dtype=None, out=None, ddof=None, keepdims=None)', '_nansum_dispatcher(a, axis=None, dtype=None, out=None, keepdims=None)', '_nanvar_dispatcher(a, axis=None, dtype=None, out=None, ddof=None, keepdims=None)', '_ndim', '_ndim_dispatcher(a)', '_needs_add_docstring(obj)', '_none_or_positive_arg(x, name)', '_nonzero_dispatcher(a)', '_NoValue', '_nper_dispatcher(rate, pmt, pv, fv=None, when=None)', '_npv_dispatcher(rate, values)', '_nt', '_nx', '_object_format(o)', '_ones_like', '_ones_like_dispatcher(a, dtype=None, order=None, subok=None, shape=None)', '_optimal_path(input_sets, output_set, idx_dict, memory_limit)', '_OrderedCounter', '_outer_dispatcher(a, b, out=None)', '_pad_dispatcher', '_pad_simple(array, pad_width, fill_value=None)', '_parse_einsum_input(operands)', '_parse_gufunc_signature(signature)', '_parse_input_dimensions(args, input_core_dims)', '_parse_possible_contraction(positions, input_sets, output_set, idx_dict, memory_limit, path_cost, naive_cost)', '_partition_dispatcher(a, kth, axis=None, kind=None, order=None)', '_percentile_dispatcher(a, q, axis=None, out=None, overwrite_input=None, interpolation=None, keepdims=None)', '_piecewise_dispatcher', '_place_dispatcher(arr, mask, vals)', '_pmt_dispatcher(rate, nper, pv, fv=None, when=None)', '_poly_dispatcher(seq_of_zeros)', '_poly_mat', '_polyder_dispatcher(p, m=None)', '_polydiv_dispatcher(u, v)', '_polyfit_dispatcher(x, y, deg, rcond=None, full=None, w=None, cov=None)', '_polyint_dispatcher(p, m=None, k=None)', '_polyval_dispatcher(p, x)', '_ppmt_dispatcher(rate, per, nper, pv, fv=None, when=None)', '_prod_dispatcher(a, axis=None, dtype=None, out=None, keepdims=None, initial=None, where=None)', '_ptp(x)', '_ptp_dispatcher(a, axis=None, out=None, keepdims=None)', '_put_along_axis_dispatcher(arr, indices, values, axis)', '_put_dispatcher(a, ind, v, mode=None)', '_pv_dispatcher(rate, nper, pmt, fv=None, when=None)', '_pytesttester', '_quantile_dispatcher(a, q, axis=None, out=None, overwrite_input=None, interpolation=None, keepdims=None)', '_quantile_is_valid(q)', "_quantile_unchecked(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False)", "_quantile_ureduce_func(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False)", '_raise_power(astr, wrap=70)', 'range(stop: int)', '_rate_dispatcher(nper, pmt, pv, fv, when=None, guess=None, tol=None, maxiter=None)', '_ravel_and_check_weights(a, weights)', '_ravel_dispatcher(a, order=None)', '_rbl(rate, per, pmt, pv, when)', '_real_dispatcher(val)', '_real_if_close_dispatcher(a, tol=None)', '_reconstruct(subtype, shape, dtype, /)', "_recursive_guard(fillvalue='...')", '_register_known_types()', '_register_type(machar, bytepat)', '_register_types()', '_remove_nan_1d(arr1d, overwrite_input=False)', '_repeat_dispatcher(a, repeats, axis=None)', '_replace_nan(a, val)', '_replace_zero_by_x_arrays(sub_arys)', '_reshape_dispatcher(a, newshape, order=None)', '_resize_dispatcher(a, new_shape)', '_roll_dispatcher(a, shift, axis=None)', '_rollaxis_dispatcher(a, axis, start=None)', '_roots_dispatcher(p)', '_rot90_dispatcher(m, k=None, axes=None)', '_round_if_needed(arr, dtype)', '_save_dispatcher(file, arr, allow_pickle=None, fix_imports=None)', '_savetxt_dispatcher(fname, X, fmt=None, delimiter=None, newline=None, header=None, footer=None, comments=None, encoding=None)', '_savez(file, args, kwds, compress, allow_pickle=True, pickle_kwargs=None)', '_savez_compressed_dispatcher', '_savez_dispatcher', '_search_sorted_inclusive(a, v)', '_searchsorted_dispatcher(a, v, side=None, sorter=None)', '_select_dispatcher(condlist, choicelist, default=None)', '_set_function_name(func, name)', '_set_pad_area(padded, axis, width_pair, value_pair)', '_set_reflect_both(padded, axis, width_pair, method, include_edge=False)', '_set_wrap_both(padded, axis, width_pair)', '_setdef()', '_setdiff1d_dispatcher(ar1, ar2, assume_unique=None)', '_setxor1d_dispatcher(ar1, ar2, assume_unique=None)', '_shape_dispatcher(a)', '_SIGNATURE', '_sinc_dispatcher(x)', '_size', '_size_dispatcher(a, axis=None)', '_slice_at_axis(sl, axis)', '_sort_complex(a)', '_sort_dispatcher(a, axis=None, kind=None, order=None)', '_split_dispatcher(ary, indices_or_sections, axis=None)', '_split_line(name, arguments, width)', '_squeeze_dispatcher(a, axis=None)', '_stack_dispatcher(arrays, axis=None, out=None)', '_std_dispatcher(a, axis=None, dtype=None, out=None, ddof=None, keepdims=None)', 'sum(iterable: Iterable[_T], /) -> Union[_T, int]', '_sum_dispatcher(a, axis=None, dtype=None, out=None, keepdims=None, initial=None, where=None)', '_swapaxes_dispatcher(a, axis1, axis2)', '_take_along_axis_dispatcher(arr, indices, axis)', '_take_dispatcher(a, indices, axis=None, out=None, mode=None)', '_tensordot_dispatcher(a, b, axes=None)', '_tile_dispatcher(A, reps)', '_TimelikeFormat(data)', '_title_fmt', '_trace_dispatcher(a, offset=None, axis1=None, axis2=None, dtype=None, out=None)', '_transpose_dispatcher(a, axes=None)', '_trapz_dispatcher(y, x=None, dx=None, axis=None)', '_trilu_dispatcher(m, k=None)', '_trilu_indices_form_dispatcher(arr, k=None)', '_trim_zeros(filt, trim=None)', '_typecodes_by_elsize', '_typedict', '_typelessdata', '_types', '_ufunc_config', '_ufunc_reconstruct(module, name)', '_union1d_dispatcher(ar1, ar2)', '_unique1d(ar, return_index=False, return_inverse=False, return_counts=False)', '_unique_dispatcher(ar, return_index=None, return_inverse=None, return_counts=None, axis=None)', '_unpack_tuple(x)', '_unsigned_subtract(a, b)', '_unspecified()', '_Unspecified', '_unwrap_dispatcher(p, discont=None, axis=None)', '_update_dim_sizes(dim_sizes, arg, core_dims)', '_update_other_results(results, best)', '_ureduce', '_vander_dispatcher(x, N=None, increasing=None)', '_var_dispatcher(a, axis=None, dtype=None, out=None, ddof=None, keepdims=None)', '_vec_string()', '_vhstack_dispatcher(tup)', '_view_roi(array, original_area_slice, axis)', '_void_scalar_repr(x)', '_when_to_num', '_wrapfunc', '_wrapit', '_wrapreduction', '_zeros_like_dispatcher(a, dtype=None, order=None, subok=None, shape=None)', '__all__', '__config__', '__dir__()', '__doc__', '__docformat__', '__file__', '__getattr__(attr)', '__git_revision__', '__len_test_types', 'ExtensionFileLoader()', '__name__', '__package__', 'ModuleSpec(may, /)', '__test_types', '__version__'], 'cv2.dnn': ['blobFromImage(image, scalefactor=None, size=None, mean=None, swapRB=None, crop=None, ddepth=None, /) -> retval', 'blobFromImages(images, scalefactor=None, size=None, mean=None, swapRB=None, crop=None, ddepth=None, /) -> retval', 'int(x=None, /) -> int', 'imagesFromBlob(blob_, images_=None, /) -> images_', 'Net_readFromModelOptimizer(xml, bin, /) -> retval', 'NMSBoxes(bboxes, scores, score_threshold, nms_threshold, eta=None, top_k=None, /) -> indices', 'NMSBoxesRotated(bboxes, scores, score_threshold, nms_threshold, eta=None, top_k=None, /) -> indices', 'readNet(model, config=None, framework=None, /) -> retval', 'readNetFromCaffe(prototxt, caffeModel=None, /) -> retval', 'readNetFromDarknet(cfgFile, darknetModel=None, /) -> retval', 'readNetFromModelOptimizer(xml, bin, /) -> retval', 'readNetFromONNX(onnxFile, /) -> retval', 'readNetFromTensorflow(model, config=None, /) -> retval', 'readNetFromTorch(model, isBinary=None, evaluate=None, /) -> retval', 'readTensorFromONNX(path, /) -> retval', 'readTorchBlob(filename, isBinary=None, /) -> retval', 'shrinkCaffeModel(src, dst, layersTypes=None, /) -> None', 'writeTextGraph(model, output, /) -> None', 'NoneType()', "str(object='', /) -> str"]}
