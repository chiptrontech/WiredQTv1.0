import gi
import time
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk,GObject,Gdk,Pango,GLib
from wta_module import *
#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils
#	#####################www.WireThemAll.com#####################

class Handler(object):
	def __init__(self,*param):			
		initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)
		self.GTKForms()
		self.sch=Scheduler(500)#500 ms
		self.sch.Start()

	def unload(self,*args):
		destroy=True
		if destroy==True:
			GLib.source_remove(self.timeout_id)
			self._window.hide()
			del self._window
			#ExitApplication() #activate this if u want to destroy this window
			return False
		else:
			self.window.Visible=False
			return True		
	def loop(self, user_data):
		if self.form_load==False:
			self.form_load=True
		if self.sch.Event():#timer routine
			#code here
			if self.timeoutdestroy!=-1:
				self.timeoutdestroy-=1
				if self.timeoutdestroy==0:
					self.unload(None)
			self.sch.Start()#restart scheduler
		return True	#return true so that main_loop can call it again 
	def create(self,prop,control,parent,event=[]):
		createWidget(self,prop,control,parent,event)
	def GTKForms(self):
		self.Activity=forms
		self.create("{'Width': '643', 'Enable': 'True', 'Var': '', 'Tag': '', 'Visible': 'True', 'ForeColor': '(0,0,0,1)', 'BackColor': '(0, 0.15818675032557372, 0.9408383013784336, 0.5)', 'Help': '', 'Left': '50', 'Events': '[[, ]]', 'Top': '30', 'ParentsType': '', 'Picture': '', 'Text': 'Layout1', 'Name': 'Activity', 'Font': '', 'Height': '541'}","Layout","usercontrol","[]")
		self.mBase=forms
		self.create("{'Width': '424', 'Enable': 'True', 'Var': '', 'Tag': '', 'Visible': 'True', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1.00,1.00,1.00,1)', 'Help': '', 'Left': '50', 'Events': '[]', 'Top': '35', 'ParentsType': 'Layout', 'Picture': '', 'Text': 'Layout2', 'Name': 'mBase', 'Font': '', 'Height': '465'}","Layout","Activity","[]")
		import Timer
		self.Timer1=Timer.Handler
		self.create("{'Width': '30', 'Enable': 'True', 'Var': '', 'Tag': 'Activex', 'Visible': 'True', 'ForeColor': '(0,0,0,1)', 'BackColor': '(0, 0.3888056493649016, 0.4463967631327912, 0.5)', 'Help': '', 'Left': '320', 'Events': '[[, ]]', 'Interval': '1000', 'Top': '335', 'ParentsType': 'Layout', 'Picture': 'Timer.png', 'Text': 'Timer1', 'Name': 'Timer1', 'Font': '', 'Height': '30'}","Timer","mBase","[]")
		import Timer
		self.mytimer=Timer.Handler
		self.create("{'Width': '30', 'Enable': 'True', 'Var': '', 'Tag': 'Activex', 'Visible': 'True', 'ForeColor': '(0,0,0,1)', 'BackColor': '(0, 0.12027104030828939, 0.5728644378168872, 0.5)', 'Help': '', 'Left': '275', 'Events': '[[, ]]', 'Interval': '1000', 'Top': '335', 'ParentsType': 'Layout', 'Picture': 'Timer.png', 'Text': 'Timer2', 'Name': 'mytimer', 'Font': '', 'Height': '30'}","Timer","mBase","[]")
		self.Image1=forms
		self.create("{'Width': '85', 'Enable': 'True', 'Var': '', 'Tag': '', 'Visible': 'True', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Help': '', 'Left': '315', 'Events': '[[, ]]', 'Top': '280', 'ParentsType': 'Layout', 'Picture': '', 'Text': 'Image1', 'Name': 'Image1', 'Font': '', 'Height': '50'}","Image","mBase","[]")
		self.Button1=forms
		self.create("{'Width': '100', 'Enable': 'True', 'Var': '', 'Tag': '', 'Visible': 'True', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Help': '', 'Left': '55', 'Events': '[]', 'Top': '300', 'ParentsType': 'Layout', 'Picture': '', 'Text': 'Button1', 'Name': 'Button1', 'Font': '', 'Height': '50'}","Button","mBase","[]")
		self.Button2=forms
		self.create("{'Width': '100', 'Enable': 'True', 'Var': '', 'Tag': '', 'Visible': 'True', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Help': '', 'Left': '170', 'Events': '[]', 'Top': '300', 'ParentsType': 'Layout', 'Picture': '', 'Text': 'Connect BT', 'Name': 'Button2', 'Font': '', 'Height': '50'}","Button","mBase","[]")
		self.Label1=forms
		self.create("{'Width': '345', 'Alignment': '', 'Enable': 'True', 'Var': '', 'Tag': '', 'Visible': 'True', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Help': '', 'Left': '55', 'Events': '[]', 'Top': '30', 'ParentsType': 'Layout', 'Picture': '', 'Text': 'Power Logger App', 'Name': 'Label1', 'Font': '', 'Height': '70'}","Label","mBase","[]")
		self.Label2=forms
		self.create("{'Width': '220', 'Alignment': '', 'Enable': 'True', 'Var': '', 'Tag': '', 'Visible': 'True', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Help': '', 'Left': '55', 'Events': '[]', 'Top': '125', 'ParentsType': 'Layout', 'Picture': '', 'Text': 'V', 'Name': 'Label2', 'Font': '', 'Height': '30'}","Label","mBase","[]")
		self.Label3=forms
		self.create("{'Width': '220', 'Alignment': '', 'Enable': 'True', 'Var': '', 'Tag': '', 'Visible': 'True', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Help': '', 'Left': '55', 'Events': '[]', 'Top': '165', 'ParentsType': 'Layout', 'Picture': '', 'Text': 'A', 'Name': 'Label3', 'Font': '', 'Height': '30'}","Label","mBase","[]")
		self.Label4=forms
		self.create("{'Width': '220', 'Alignment': '', 'Enable': 'True', 'Var': '', 'Tag': '', 'Visible': 'True', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Help': '', 'Left': '55', 'Events': '[]', 'Top': '200', 'ParentsType': 'Layout', 'Picture': '', 'Text': 'W', 'Name': 'Label4', 'Font': '', 'Height': '30'}","Label","mBase","[]")
		self.Label5=forms
		self.create("{'Width': '220', 'Alignment': '', 'Enable': 'True', 'Var': '', 'Tag': '', 'Visible': 'True', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Help': '', 'Left': '55', 'Events': '[]', 'Top': '240', 'ParentsType': 'Layout', 'Picture': '', 'Text': 'WH', 'Name': 'Label5', 'Font': '', 'Height': '30'}","Label","mBase","[]")
	def Widget(self):
		if self._usercontrol in self._mainlayout.get_children():
			self._mainlayout.remove(self._usercontrol)
		return self._usercontrol
	def Hide(self):
		self._window.hide()
	def Show(self,modal=False,x=None,y=None):
		if x!=None:
			self._window.move(x,y)
		self._window.set_modal(modal)
		self._window.show()
		Gtk.main()
		return ""#put ur return value here upon closing this form
if __name__ == "__main__":
	_m = Handler()
	_m._window.show()
	Gtk.main()