import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pangofrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	#WiredEvent def Tick(self)	#add more events 	#WiredProperty 'Interval': '1000'	def __init__(self,*param):					initUI(self,param)		self.GTKForms()			super(usercontrol).__init__(usercontrol)		self._text=''					self.sch=Scheduler(0)		self.interval=0		self.enabled=False	def activeXcreated(self):		pass	def unload(self,*args):		self._window=None		Gtk.main_quit()		def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch._flag and self.sch.Event():#timer routine			if self.caller!=None:				if 'Tick' in self.wiredevents:						self.wiredevents['Tick']()			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})		@property	def Interval(self):		return self.interval	@Interval.setter	def Interval(self,value):		value=int(value)		self.sch=Scheduler(value)		self.interval=value		pass	@property	def Enable(self):		return self.enabled	@Enable.setter	def Enable(self,value):		if type(value)==str:			value=TrueFalse(value)		self.enabled=value		if value==True:			self.sch.Start()		else:			self.sch.Stop()		pass	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Picture': '', 'Enable': 'True', 'Name': 'Entry1', 'Visible': 'False', 'Text': 'Entry1', 'Top': '50', 'Height': '30', 'ParentsType': '', 'Width': '170', 'ForeColor': '(0,0,0,1)', 'Tag': '', 'BackColor': '(1,1,1,1)', 'Font': '', 'Events': '[]', 'Left': '300'}","Entry","usercontrol","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False):		self._window.set_modal(modal)		self._window.show()		Gtk.main()	def Entry1_clicked(self,e):		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()