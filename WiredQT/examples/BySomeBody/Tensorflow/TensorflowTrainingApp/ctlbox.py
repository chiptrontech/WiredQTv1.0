from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import * 
from PyQt5.QtGui import * 
from wired_module import *
#	Generated By WiredQT for Python: by Rocky Nuarin, 2021 Phils
from copy import deepcopy
try:
	import parseXML
except:
	pass
class boxlst:
	def GenerateXML(self):
		p=parseXML.Properties()
		def backonefolder(fname):
			x=GetPath(fname)
			x=x.replace("\\",'/')
			y=''
			for a in x[::-1]:
				if a=="/":break
				y+=a
			return y[::-1]
		folder=backonefolder(self.filename)
		p.fields['folder']=folder
		p.fields['filename']=GetFilename(self.filename)
		p.fields['path']=GetPath(self.filename)
		p.fields['database']='unknown'
		p.fields['width']=str(self.shape[1])
		p.fields['height']=str(self.shape[0])
		p.fields['depth']=str(self.shape[2])
		p.fields['segmented']='0'

		blist=[]
		for a in self.lst:
			b=parseXML.BoundingBox()
			b.fields['xmin'],b.fields['ymin'],b.fields['xmax'],b.fields['ymax']=a.x1,a.y1,a.x2,a.y2
			b.fields['name']=a.name
			b.fields['pose']='Unspecified'
			b.fields['truncated']='0'
			b.fields['difficult']='0'

			blist.append(b)
		x=[]
		x.append(p)
		x.append(blist)
		xml=parseXML.GenerateXML(x)
		fname=GetPath(self.filename) + "/" + GetFilenameNoEXT(self.filename)+".xml"
		SaveFileStr(fname,xml)
	def __init__(self,caller,img,event,filename=None):
		self.lst=[]
		self.x=box()
		self.img=img
		self.caller=caller
		self.imageOCV=None
		self.filename=filename
		if filename!=None:		
			
			self.img.LoadPicture=filename
			path=GetPath(filename)
			fname=path+"/"+GetFilenameNoEXT(filename)+".xml"
			if FileExist(fname)==True:
				self.xml=parseXML.parseXML(fname)
				for a in self.xml[1]:
					#import pdb; pdb.set_trace();
					x=box()
					x.x1,x.x2,x.y1,x.y2,=int(a.fields['xmin']),int(a.fields['xmax']),int(a.fields['ymin']),int(a.fields['ymax'])
					x.name=a.fields['name']
					self.lst.append(x)										
				
			self.imageOCV=img.imread()
			self.shape=self.imageOCV.shape
			self.putboxes(fast=False)
		self.filename=filename
		
		self.img.obj.installEventFilter(self.caller)
		#self.event=event
		#self.aa1=event.connect('motion-notify-event',self.Image1_motion_notify_event)
		#self.aa2=event.connect('button-press-event',self.Image1_button_press_event)
		#self.aa3=event.connect('button-release-event',self.Image1_button_release_event)

	def __del__(self): 
		print("Deleted")
	def delete(self): 
		#self.event.disconnect(self.aa1)
		#self.event.disconnect(self.aa2)
		#self.event.disconnect(self.aa3)
		pass
	def putboxes(self,fast=True):
		if self.imageOCV is None:
			return
		if fast:
			if len(self.lst)!=0:
				a=self.lst[-1]
				_x=self.imageOCV
				cv2.rectangle(_x, (a.x1,a.y1),(a.x2,a.y2), (0,255,0), 2)
				cv2.putText(_x, a.name, (a.x1,a.y1-7),fontFace = cv2.FONT_HERSHEY_SIMPLEX ,  fontScale=0.5,color=(255,0,0), thickness=1)				
				self.img.LoadPictureOCV=_x
				
		else:
			for a in self.lst:
				if a.y2!=None:
					self.setNumpyImg()
					_x=self.imageOCV
					cv2.rectangle(_x, (a.x1,a.y1),(a.x2,a.y2), (0,255,0), 2)
					cv2.putText(_x, a.name, (a.x1,a.y1-7),fontFace = cv2.FONT_HERSHEY_SIMPLEX ,fontScale=0.5,  color=(255,0,0), thickness=1)
					self.img.LoadPictureOCV=_x
		if len(self.lst)==0:
			self.img.LoadPicture=self.filename
			self.imageOCV=self.img.imread()
	def setNumpyImg(self):
		if self.img.imread() is None:
			import numpy as np
			x=np.ones((self.img.Height,self.img.Width,3))
			self.img.LoadPictureOCV=x
			self.imageOCV=x
#				
	def set(self,x,y):
		self.x.set(x,y)
		if self.x.y2!=None:
			_x=deepcopy(self.imageOCV)
			cv2.rectangle(_x, (self.x.x1,self.x.y1),(self.x.x2,self.x.y2), (255,0,0), 2)
			self.img.LoadPictureOCV=_x
	def point1(self):
		return (self.x.x1,self.x.y1)
	def point2(self):
		return (self.x.x2,self.x.y2)

	def finish(self):
		self.lst.append(self.x)
		self.x=box()	


class box:
	def __init__(self):
		self.x1=None
		self.x2=None
		self.y1=None
		self.y2=None
		self.name=""	
	def set(self,x,y):
		if self.x1==None:
			self.x1=x
			self.y1=y
		else:
			self.x2=x
			self.y2=y
	


	
import cv2
class Handler(QtWidgets.QWidget,usercontrol):
	#WiredEvent def draw()
	def __init__(self, *param):    
		super(Handler, self).__init__(None)
		initUI(self,param,w=1366,h=768,title="WiredQT v1.0",controlbox=True,startpos=(0,30),timeoutdestroy=-1)
		self.GTKForms()
		self.timer=QtCore.QTimer()
		self.timer.timeout.connect(self.loop)
		self.timer.start(10)    
		self.sch=Scheduler(500)#500 ms
		self.sch.Start()
		self._text=''
		self._usercontrolproperty=''
		self.Init()	
		self.ScrolledWindow1.setWidget(self.Layout1.obj)
		
		#fname='a.jpg'
		#x=cv2.imread('a.jpg')
		#self.boxes.delete()
		#self.Init(x.shape[1],x.shape[0],False,fname)	
		
	def eventFilter(self, obj, event):

		if obj==self.boxes.img.obj:

			if event.type() == QtCore.QEvent.MouseButtonPress:
				print(event.button(),event.x(),event.y())
				self.Entry2.SetFocus()
				self.boxes.setNumpyImg()
				#self.boxes.set_image(self.Image1)
				self.boxes.set(event.x(),event.y())
				pass				
			if event.type() == QtCore.QEvent.MouseMove:
				import cv2
				self.boxes.set(event.x(),event.y())
			if event.type() == QtCore.QEvent.MouseButtonRelease:	
				if self.boxes.x.x1!=None:
					self.boxes.set(event.x(),event.y())
					ret="YES"
					if self.caller!=None and 'draw' in self.wiredevents:
						ret=self.wiredevents['draw']()
					if ret=="YES":
						self.boxes.finish()		
			
				self.boxes.putboxes()				
		return super(Handler, self).eventFilter(obj, event)				
	def Init(self,w=0,h=0,zoom=False,filename=None):#zoom=True then clear all box
		if zoom:
			ratioW=w/self.boxes.img.Width
			ratioH=h/self.boxes.img.Height
			for a in self.boxes.lst:
				#import pdb; pdb.set_trace();
				_w=p;ccnabs(a.x1-a.x2)
				_h=abs(a.y1-a.y2)
				a.x1=int(ratioW*a.x1)
				a.y1=int(ratioH*a.y1)

				a.x2=a.x1+int(ratioW*_w)
				a.y2=a.y1+int(ratioH*_h)
				
		for a in self.Layout1.children():
			a.setParent(None)
			a.deleteLater()
			
		
		self._Image1=QLabel()
		self.Image1=forms(self._Image1)
		if w==0 or h==0:
			w,h=self.ScrolledWindow1.Width,self.ScrolledWindow1.Height	
		self.Layout1.Width,self.Layout1.Height=w,h#self.ScrolledWindow1.Width,self.ScrolledWindow1.Height
		self.Image1.Width,self.Image1.Height=w,h#self.ScrolledWindow1.Width,self.ScrolledWindow1.Height
		
		self._Image1.setParent(self.Layout1.obj)
		self.Image1.Visible=True
		if zoom==True:
			lst=self.boxes.lst
			self.boxes.delete()
		
		self.boxes=boxlst(self,self.Image1,'self.Image1Event.obj',filename)
		
		if zoom==True:
			self.boxes.lst=lst
			self.boxes.putboxes(False)

	def connect(self,ev,evusr):
		self.wiredevents.update({ev:evusr})
	def activeXcreated(self,*args):
		self.ScrolledWindow1.Width= self.Width
		self.ScrolledWindow1.Height= self.Height
		pass
	def unload(self,*args):
		destroy=True
		if destroy==True:
			GLib.source_remove(self.timeout_id)
			self._window.hide()
			del self._window
			#ExitApplication() #activate this if u want to destroy this window
			return False
		else:
			self.window.Visible=False
			return True		
	def loop(self):
		if self.form_load==False:
			self.form_load=True
		if self.sch.Event():#timer routine
			#code here
			if self.timeoutdestroy!=-1:
				self.timeoutdestroy-=1
				if self.timeoutdestroy==0:
					self.unload(None)
			self.sch.Start()#restart scheduler
		return True	#return true so that main_loop can call it again 	
	def createwidget(self,prop,control,parent,event=[]):
		createWidget(self,prop,control,parent,event)
	def GTKForms(self):		self.createwidget("{'Events': '[key-press-event]', 'Width': '170', 'Alignment': '', 'Enable': 'True', 'Picture': '', 'Name': 'Entry2', 'BackColor': '(1,1,1,1)', 'Var': '', 'ParentsType': '', 'Help': '', 'Top': '672', 'Visible': 'True', 'Height': '30', 'Text': 'Entry2', 'Left': '563', 'Tag': '', 'ForeColor': '(0,0,0,1)', 'Font': ''}",'QLineEdit','usercontrol',"[['key-press-event', 'self,event,e']]")
		self.createwidget("{'Width': '100', 'Name': 'Button1', 'Picture': '', 'Enable': 'True', 'BackColor': '(1,1,1,1)', 'Var': '', 'Height': '50', 'ForeColor': '(0,0,0,1)', 'Help': '', 'Top': '656', 'Visible': 'True', 'ParentsType': '', 'Text': 'Zoom', 'Left': '338', 'Tag': '', 'Events': '[clicked]', 'Font': ''}",'QPushButton','usercontrol',"[['clicked', 'self,e']]")
		self.createwidget("{'Events': [], 'Width': '640', 'Enable': 'True', 'Picture': '', 'Name': 'ScrolledWindow1', 'BackColor': '(0, 0.4316880916756659, 0.7364792088713961, 0.5)', 'Var': '', 'ParentsType': '', 'Help': '', 'Top': '0', 'Visible': 'True', 'Height': '480', 'Text': '', 'Left': '0', 'Tag': '', 'ForeColor': '(0,0,0,1)', 'Font': ''}",'QScrollArea','usercontrol',"[]")
		self.createwidget("{'Width': '170', 'Alignment': '', 'Name': 'Entry1', 'Picture': '', 'Enable': 'True', 'BackColor': '(1,1,1,1)', 'Var': '', 'Height': '30', 'ForeColor': '(0,0,0,1)', 'Help': '', 'Top': '671', 'Visible': 'True', 'ParentsType': '', 'Text': '640,480', 'Left': '154', 'Tag': '', 'Events': [], 'Font': ''}",'QLineEdit','usercontrol',"[]")
		self.createwidget("{'Events': [], 'Width': '300', 'Enable': 'True', 'Picture': '', 'Name': 'Layout1', 'BackColor': '(0, 0.7362415546826772, 0.2706414342707212, 0.5)', 'Var': '', 'ParentsType': '', 'Help': '', 'Top': '0', 'Visible': 'True', 'Height': '300', 'Text': '', 'Left': '-15', 'Tag': '', 'ForeColor': '(0,0,0,1)', 'Font': ''}",'QWidget','usercontrol',"[]")
		self.createwidget("{'Width': '100', 'Name': 'Button2', 'Picture': '', 'Enable': 'True', 'BackColor': '(1,1,1,1)', 'Var': '', 'Height': '50', 'ForeColor': '(0,0,0,1)', 'Help': '', 'Top': '656', 'Visible': 'True', 'ParentsType': '', 'Text': 'Clear+Zoom', 'Left': '444', 'Tag': '', 'Events': '[clicked]', 'Font': ''}",'QPushButton','usercontrol',"[['clicked', 'self,e']]")
	def Widget(self):
		return self
	def Button1_clicked(self,e):
		x,y=eval(self.Entry1.Text)
		self.Init(self,x,y,zoom=True,filename="cam_image4.jpg")
		pass
	def Button2_clicked(self,e):
		x,y=eval(self.Entry1.Text)
		self.Init(self,x,y,zoom=False)
		pass
	def Entry2_key_press_event(self,event,e):
		print(e.hardware_keycode,chr(e.hardware_keycode))
		if e.hardware_keycode==27:
			self.boxes.x.x1=None
			self.boxes.x.y1=None
			self.boxes.x.x2=None
			self.boxes.x.y2=None
			self.boxes.putboxes()
		pass
	def ClearBox(self):
		self.boxes.lst=[]
		self.boxes.putboxes(fast=False)
if __name__ == '__main__':
	import sys
	app = QtWidgets.QApplication(sys.argv)
	w = Handler()
	w.show()
	sys.exit(app.exec_())