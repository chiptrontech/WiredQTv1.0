from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import * 
from wired_module import * 
#	Generated By WiredQT for Python: by Rocky Nuarin, 2021 Phils
class Handler(QtWidgets.QWidget,usercontrol):
	def __init__(self, *param):    
		super(Handler, self).__init__(None)
		initUI(self,param,w=400,h=400,title="WiredQTv5.0",controlbox=True,startpos=(0,30),timeoutdestroy=-1)
		self.GTKForms()
		self.timer=QtCore.QTimer()
		self.timer.timeout.connect(self.loop)
		self.timer.start(10)       

		self.sch=Scheduler(5000)#500 ms
		self.sch.Start()
		self.WebCam0.Open=True

		self.TensorFlow1.Open=True

	def createwidget(self,prop,control,parent,event=[]):
		createWidget(self,prop,control,parent,event)         
	def GTKForms(self):
		self.createwidget("{'Name': 'WebCam0', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '7', 'Width': '669', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': [[['frameReady', 'self,arg1']]], 'Height': '478', 'Left': '10', 'Tag': 'Activex', 'Text': '', 'Help': '', 'Open': 'False', 'camindex': '0'}",'WebCam','usercontrol',"[['frameReady', 'self,arg1']]")
		self.createwidget("{'Name': 'TensorFlow1', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '44', 'Width': '100', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': [], 'Height': '100', 'Left': '686', 'Tag': 'Activex', 'Text': '', 'Help': '', 'ModelFolder': 'mymodel', 'Frozen_Inference': 'saved_model.pb', 'LabelMap': 'labelmap.pbtxt'}",'TensorFlow','usercontrol',"[]")
	def Widget(self):
		return self    
	def loop(self):
		if self.form_load==False:
			self.form_load=True
		if self.sch.Event():#timer routine
			#code here
			if self.timeoutdestroy!=-1:
				self.timeoutdestroy-=1
				if self.timeoutdestroy==0:
					pass#self.unload(None)
			self.sch.Start()#restart scheduler      
		
	def connect(self,ev,evusr):
		self.wiredevents.update({ev:evusr})     
	def activeXcreated(self,*args):
		pass    
	def eventFilter(self, obj, event):
		return super(Handler, self).eventFilter(obj, event)
	
	def WebCam0_frameReady(self,arg1):
		if self.WebCam0.Open==False:return
		output_dict=None
		img,output_dict=self.TensorFlow1.Detect(arg1,min_score_thresh=0.5)
		if output_dict !=None:
			print(len(output_dict))
			print(output_dict.keys())
			for a in range(5):			
				classesindex=output_dict['detection_classes'][a]
				#print first five detection
				#score,class name
				print(output_dict['detection_scores'][a],self.TensorFlow1.category_index[classesindex]['name'])
		self.WebCam0.imshow(img)
		#self.WebCam1.imshow(frame)
		self.frame=arg1
if __name__ == '__main__':
	import sys
	app = QtWidgets.QApplication(sys.argv)
	w = Handler()
	w.show()
	sys.exit(app.exec_())
