from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import * 
from wired_module import * 
#	Generated By WiredQT for Python: by Rocky Nuarin, 2021 Phils
class Handler(QtWidgets.QWidget,usercontrol):
	def __init__(self, *param):    
		super(Handler, self).__init__(None)
		initUI(self,param,w=400,h=400,title="WiredQTv5.0",controlbox=True,startpos=(0,30),timeoutdestroy=-1)
		self.GTKForms()
		self.timer=QtCore.QTimer()
		self.timer.timeout.connect(self.loop)
		self.timer.start(10)       

		self.sch=Scheduler(100)#500 ms
		self.sch.Start()
		
		self.QProgressBar1.setOrientation(Qt.Horizontal);
		self.QProgressBar1.setRange(0, 100); # Let's say it goes from 0 to 100
		self.QProgressBar1.setValue(0); # With a current value of 10

	def createwidget(self,prop,control,parent,event=[]):
		createWidget(self,prop,control,parent,event)         
	def GTKForms(self):		self.createwidget("{'Name': 'QGraphicsView0', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '55', 'Width': '287', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': [], 'Height': '268', 'Left': '241', 'Tag': '', 'Text': '', 'Help': ''}",'QGraphicsView','usercontrol',"[]")
		self.createwidget("{'Name': 'QProgressBar1', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '337', 'Width': '270', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': '[valueChanged]', 'Height': '21', 'Left': '105', 'Tag': '', 'Text': '', 'Help': ''}",'QProgressBar','usercontrol',"[['valueChanged', 'self,arg1']]")
	def Widget(self):
		return self    
	def loop(self):
		if self.form_load==False:
			self.form_load=True
		if self.sch.Event():#timer routine
			
			x=self.QProgressBar1.value()
			if x>=100:
				self.QProgressBar1.setValue(0);
			x=self.QProgressBar1.value()+1
			self.QProgressBar1.setValue(x);
			
			if self.timeoutdestroy!=-1:
				self.timeoutdestroy-=1
				if self.timeoutdestroy==0:
					pass#self.unload(None)
			self.sch.Start()#restart scheduler      
		
	def connect(self,ev,evusr):
		self.wiredevents.update({ev:evusr})     
	def activeXcreated(self,*args):
		pass    
	def eventFilter(self, obj, event):
		return super(Handler, self).eventFilter(obj, event)
	
	def QProgressBar1_valueChanged(self,arg1):
		print(arg1)
		pass
if __name__ == '__main__':
	import sys
	app = QtWidgets.QApplication(sys.argv)
	w = Handler()
	w.show()
	sys.exit(app.exec_())
