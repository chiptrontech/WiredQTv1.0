from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import * 
from wired_module import * 

import numpy as np
#	Generated By WiredQT for Python: by Rocky Nuarin, 2021 Phils
class Handler(QtWidgets.QWidget,usercontrol):
	def __init__(self, *param):    
		super(Handler, self).__init__(None)
		initUI(self,param,w=800,h=400,title="WiredQTv5.0",controlbox=True,startpos=(0,30),timeoutdestroy=-1)
		self.GTKForms()
		self.timer=QtCore.QTimer()
		self.timer.timeout.connect(self.loop)
		self.timer.start(10)       

		self.sch=Scheduler(5000)#500 ms
		self.sch.Start()
		

	def createwidget(self,prop,control,parent,event=[]):
		createWidget(self,prop,control,parent,event)         
	def GTKForms(self):		self.createwidget("{'Name': 'MatPlotLib0', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '1', 'Width': '343', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': [], 'Height': '246', 'Left': '-1', 'Tag': 'Activex', 'Text': '', 'Help': '', 'Scatter': 'False', 'MarkerSize': '3', 'Title': 'My Graph', 'LineStyle': 'solid'}",'MatPlotLib','usercontrol',"[]")
		self.createwidget("{'Name': 'QPushButton1', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '250', 'Width': '120', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': '[clicked]', 'Height': '37', 'Left': '15', 'Tag': '', 'Text': 'sin_cos', 'Help': ''}",'QPushButton','usercontrol',"[['clicked', 'self,arg1']]")
		self.createwidget("{'Name': 'MatPlotLib1', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '1', 'Width': '343', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': [], 'Height': '246', 'Left': '344', 'Tag': 'Activex', 'Text': '', 'Help': '', 'Scatter': 'True', 'MarkerSize': '3', 'Title': 'Spiral Dataset', 'LineStyle': 'none'}",'MatPlotLib','usercontrol',"[]")
		self.createwidget("{'Name': 'QPushButton3', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '250', 'Width': '91', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': '[clicked]', 'Height': '35', 'Left': '344', 'Tag': '', 'Text': 'Spiral Dataset', 'Help': ''}",'QPushButton','usercontrol',"[['clicked', 'self,arg1']]")
		self.createwidget("{'Name': 'QPushButton5', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '250', 'Width': '89', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': '[clicked]', 'Height': '37', 'Left': '136', 'Tag': '', 'Text': 'sin', 'Help': ''}",'QPushButton','usercontrol',"[['clicked', 'self,arg1']]")
		self.createwidget("{'Name': 'QPushButton4', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '250', 'Width': '90', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': '[clicked]', 'Height': '37', 'Left': '230', 'Tag': '', 'Text': 'cos', 'Help': ''}",'QPushButton','usercontrol',"[['clicked', 'self,arg1']]")
	def Widget(self):
		return self    
	def loop(self):
		if self.form_load==False:
			self.form_load=True
		if self.sch.Event():#timer routine
			#code here
			if self.timeoutdestroy!=-1:
				self.timeoutdestroy-=1
				if self.timeoutdestroy==0:
					pass#self.unload(None)
			self.sch.Start()#restart scheduler      
		
	def connect(self,ev,evusr):
		self.wiredevents.update({ev:evusr})     
	def activeXcreated(self,*args):
		pass    
	def eventFilter(self, obj, event):
		return super(Handler, self).eventFilter(obj, event)
	
	def QPushButton1_clicked(self,arg1):

		time        = np.arange(0, 10, 0.1);

		amplitude   = np.sin(time)

		amplitude2   = np.cos(time)



		self.MatPlotLib0.Title="Blue=sin wave,Orange=cos wave"

		self.MatPlotLib0.graphMultiple(time,amplitude,time,amplitude2)
		pass
	def QPushButton3_clicked(self,arg1):
		NN = 100 # number of points per class
		DD = 2 # dimensionality
		KK = 3 # number of classes
		xx = np.zeros((NN*KK,DD)) # data matrix (each row = single example)
		yy = np.zeros(NN*KK, dtype='uint8') # class labels
		for j in range(KK):
			ix = range(NN*j,NN*(j+1))
			r = np.linspace(0.0,1,NN) # radius
			t = np.linspace(j*4,(j+1)*4,NN) + np.random.randn(NN)*0.2 # theta
			xx[ix] = np.c_[r*np.sin(t), r*np.cos(t)]
			yy[ix] = j
		self.MatPlotLib1.graphMultiple(xx[0:100,0],xx[0:100,1],xx[100:200,0],xx[100:200,1],xx[200:300,0],xx[200:300,1])
		pass
	def QPushButton5_clicked(self,arg1):
		time        = np.arange(0, 10, 0.1);
		amplitude   = np.sin(time)
		self.MatPlotLib0.Title="sin wave"
		self.MatPlotLib0.graphMultiple(time,amplitude)
		pass
	def QPushButton4_clicked(self,arg1):
		time        = np.arange(0, 10, 0.1);
		amplitude   = np.cos(time)
		self.MatPlotLib0.Title="cos wave"
		self.MatPlotLib0.graphMultiple(time,amplitude)
		pass
if __name__ == '__main__':
	import sys
	app = QtWidgets.QApplication(sys.argv)
	w = Handler()
	w.show()
	sys.exit(app.exec_())
