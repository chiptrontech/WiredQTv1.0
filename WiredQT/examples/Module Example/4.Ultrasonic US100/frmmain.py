import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(object):	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self.US1001.Open=True	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Name': 'US1001', 'Port': '/dev/ttyS0', 'Height': '30', 'Var': '', 'Font': '', 'ParentsType': '', 'Top': '195', 'Tag': 'Activex', 'Picture': 'US100.png', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(0, 0.5936772525366727, 0.5523303861997128, 0.5)', 'Events': '[DistanceAquired]', 'Enable': 'True', 'Visible': 'True', 'Left': '185', 'Text': 'US1001', 'Width': '30'}","US100","usercontrol","[['DistanceAquired', 'self,dist_mm']]")		self.create("{'Name': 'Button1', 'Height': '50', 'Var': '', 'Font': '', 'ParentsType': '', 'Top': '245', 'Tag': '', 'Picture': '', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Events': '[clicked]', 'Enable': 'True', 'Visible': 'True', 'Left': '190', 'Text': 'Get Distance', 'Width': '135'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Name': 'Entry1', 'Alignment': '', 'Height': '30', 'Var': '', 'Font': '', 'ParentsType': '', 'Top': '195', 'Tag': '', 'Picture': '', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Events': '[[, ]]', 'Enable': 'True', 'Visible': 'True', 'Left': '240', 'Text': '0', 'Width': '170'}","Entry","usercontrol","[]")		self.create("{'Name': 'Label1', 'Alignment': '', 'Height': '30', 'Var': '', 'Font': '', 'ParentsType': '', 'Top': '65', 'Tag': '', 'Picture': '', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Events': '[]', 'Enable': 'True', 'Visible': 'True', 'Left': '185', 'Text': 'US100_TX <-> RasPI_TX', 'Width': '195'}","Label","usercontrol","[]")		self.create("{'Name': 'Label2', 'Alignment': '', 'Height': '30', 'Var': '', 'Font': '', 'ParentsType': '', 'Top': '105', 'Tag': '', 'Picture': '', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Events': '[]', 'Enable': 'True', 'Visible': 'True', 'Left': '185', 'Text': 'US100_RX <-> Raspi_RX', 'Width': '195'}","Label","usercontrol","[]")		self.create("{'Name': 'Label3', 'Alignment': '', 'Height': '30', 'Var': '', 'Font': '', 'ParentsType': '', 'Top': '145', 'Tag': '', 'Picture': '', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Events': '[]', 'Enable': 'True', 'Visible': 'True', 'Left': '185', 'Text': 'Due to Wrong Label Design in US100', 'Width': '280'}","Label","usercontrol","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def US1001_DistanceAquired(self,dist_mm):		self.Entry1.Text=dist_mm		pass	def Button1_clicked(self,e):		self.US1001.GetDistance()		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()