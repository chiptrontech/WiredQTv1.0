from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import * 
from wired_module import * 
#	Generated By WiredQT for Python: by Rocky Nuarin, 2021 Phils
class Handler(QtWidgets.QWidget,usercontrol):
	#WiredEvent def oncomm()
	#WiredProperty 'Max': '100'
	#WiredProperty 'Min': '0'
	#WiredProperty 'Text': '0'
	def __init__(self, *param):    
		super(Handler, self).__init__(None)
		initUI(self,param,w=width_resolution,h=height_resolution,title="WiredQTv5.0",controlbox=True,startpos=(0,30),timeoutdestroy=-1)
		self.GTKForms()
		self.timer=QtCore.QTimer()
		self.timer.timeout.connect(self.loop)
		self.timer.start(10)       

		self.sch=Scheduler(5000)#500 ms
		self.sch.Start()
		self._Max=100
		self._Min=0
		self._Text="0"
		self.QLabel0.Top=0;self.QLineEdit1.Top=0;self.QLabel2.Top=0;
		self.QLabel0.Left=0;self.QLineEdit1.Left=self.QLabel0.Width;self.QLabel2.Left=self.QLineEdit1.Left+self.QLineEdit1.Width;
		qi=QIntValidator(-100000000, 100000000, self) 
		self.QLineEdit1.setValidator(qi)
	@property
	def Text(self):
		return self._Text
	@Text.setter	
	def Text(self,value):
		self._Text=value
		self.QLineEdit1.Text=str(value)
	@property
	def Max(self):
		return self._Max
	@Max.setter	
	def Max(self,value):
		self._Max=int(value)
	@property
	def Min(self):
		return self._Min
	@Min.setter	
	def Min(self,value):
		self._Min=int(value)

	def createwidget(self,prop,control,parent,event=[]):
		createWidget(self,prop,control,parent,event)         
	def GTKForms(self):
		self.createwidget("{'Name': 'QLabel0', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '105', 'Width': '39', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': '[installEventFilter]', 'Height': '33', 'Left': '104', 'Tag': '', 'Text': '-', 'Help': ''}",'QLabel','usercontrol',"[['installEventFilter', 'self']]")
		self.createwidget("{'Name': 'QLineEdit1', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '108', 'Width': '100', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': [], 'Height': '30', 'Left': '144', 'Tag': '', 'Text': '0', 'Help': ''}",'QLineEdit','usercontrol',"[]")
		self.createwidget("{'Name': 'QLabel2', 'Var': '', 'Font': '', 'Enable': 'True', 'Top': '106', 'Width': '39', 'ParentsType': '', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'BackColor': '(1,1,1,0.25)', 'Events': '[installEventFilter]', 'Height': '33', 'Left': '244', 'Tag': '', 'Text': '+', 'Help': ''}",'QLabel','usercontrol',"[['installEventFilter', 'self']]")
	def Widget(self):
		return self    
	def loop(self):
		if self.form_load==False:
			self.form_load=True
		if self.sch.Event():#timer routine
			#code here
			if self.timeoutdestroy!=-1:
				self.timeoutdestroy-=1
				if self.timeoutdestroy==0:
					pass#self.unload(None)
			self.sch.Start()#restart scheduler      
		
	def connect(self,ev,evusr):
		self.wiredevents.update({ev:evusr})     
	def activeXcreated(self,*args):
		pass    
	def eventFilter(self, obj, event):
		
		if obj==self.QLabel0.obj and event.type()==2:
			self.QLineEdit1.Text=str(int(self.QLineEdit1.Text)-1)
			if int(self.QLineEdit1.Text)<self.Min:
				self.QLineEdit1.Text=str(self.Min)
			if self.caller!=None and 'oncomm' in self.wiredevents:self.wiredevents['oncomm']()

		if obj==self.QLabel2.obj and event.type()==2:
			self.QLineEdit1.Text=str(int(self.QLineEdit1.Text)+1)
			if int(self.QLineEdit1.Text)>self.Max:
				self.QLineEdit1.Text=str(self.Max)
			if self.caller!=None and 'oncomm' in self.wiredevents:self.wiredevents['oncomm']()
		
		return super(Handler, self).eventFilter(obj, event)
	
	def QLabel0_installEventFilter(self):
		pass
	def QLabel2_installEventFilter(self):
		pass
if __name__ == '__main__':
	import sys
	app = QtWidgets.QApplication(sys.argv)
	w = Handler()
	w.show()
	sys.exit(app.exec_())
