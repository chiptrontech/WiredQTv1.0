from PyQt5 import QtCore, QtWidgetsfrom PyQt5.QtGui import * from wired_module import * #	Generated By WiredQT for Python: by Rocky Nuarin, 2021 Philsimport numpy as npclass Handler(QtWidgets.QWidget,usercontrol):	#WiredEvent def LocationHeading(x,y,xdir,ydir)	#WiredEvent def buttonpress()	#WiredEvent def buttonrelease()	#WiredProperty 'Folder': 'img'	#WiredProperty 'AutoRun': 'False','list':["True","False"]	#WiredProperty 'Speed': '100'	#WiredProperty 'Acceleration': 'True','list':["True","False"]	#WiredProperty 'AutoScale': 'True','list':["True","False"]	#WiredProperty 'Gravity':  'False','list':["True","False"]	#WiredProperty 'GavityValue': '1'	#WiredProperty 'Stun': 'False'	#WiredProperty 'currX': ''	#WiredProperty 'currY': ''	def __init__(self, *param):    		super(Handler, self).__init__(None)		initUI(self,param,w=632,h=640,title="WiredQTv5.0",controlbox=True,startpos=(0,30),timeoutdestroy=-1)		self.GTKForms()		self.timer=QtCore.QTimer()		self.timer.timeout.connect(self.loop)		self.timer.start(10)       		self.sch=Scheduler(100)#500 ms		self.sch.Start()				self.schmove=Scheduler(20)#500 ms		self.schmove.Start()		self.schgravity=Scheduler(20)		self.schgravity.Start()					self._autoinc=False		self.currimgptr=0		self._Folder="img"		self._Speed=""		self._Acceleration=False				self.hasscale=False		self._AutoScale=False		self._Gravity=False		self._Gravitybuf=False		self.firstime=True		self._GavityValue=1		self._stun=False		self._currX=""		self.running=False		#self.activeXcreated(None)		#self.AutoRun=True	@property	def currX(self):		try:			return self.Left+(self.Width/2)		except:			return 0	@property	def currY(self):		try:			return self.Top+(self.Height/2)		except:			return 0			@property	def Stun(self):		return self._stun	@Stun.setter		def Stun(self,value):		self._stun=TrueFalse(value)	@property	def GavityValue(self):		return self._GavityValue	@GavityValue.setter		def GavityValue(self,value):		self._GavityValue=int(value)	@property	def Gravity(self):		return self._Gravity	@Gravity.setter		def Gravity(self,value):		self._Gravitybuf=TrueFalse(value)		self._Gravity=TrueFalse(value)	@property	def AutoScale(self):		return self._AutoScale	@AutoScale.setter		def AutoScale(self,value):		self._AutoScale=TrueFalse(value)	@property	def Acceleration(self):		return self._Acceleration	@Acceleration.setter		def Acceleration(self,value):		self._Acceleration=TrueFalsevalue	@property	def Speed(self):		return self._Speed	@Speed.setter		def Speed(self,value):		self.sch.Stop()		self.sch=Scheduler(int(value))		self.sch.Start()		#self._autoinc=False	@property	def AutoRun(self):		return self._autoinc	@AutoRun.setter		def AutoRun(self,value):		self._autoinc=TrueFalse(value)	@property	def Folder(self):		return self._Folder	@Folder.setter		def Folder(self,value):		self._Folder=value				def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):				pass	def Open(self):		self.GetImageFile(self._Folder)		self.DrawingArea1.Width=self.Width		self.DrawingArea1.Height=self.Height		self.scalex=self.DrawingArea1.Width/self.image_surface[0].shape[0]		self.scaley=self.DrawingArea1.Height/self.image_surface[0].shape[1]				self.running=True	def loop(self):				if self.running:			inc=10			if self.form_load==False:				self.form_load=True			def moverot(inc):					if self._stun:						return 						xcenter=self.Left+self.Width/2					ycenter=self.Top+self.Height/2					xdir,ydir=0,0					if self.firstime==True:						self.xp=xcenter# to fire Graviry if enabled						self.yp=ycenter+1# to fire Graviry if enabled						self.firstime=False					hasmove=False					if self.xp>xcenter:						if abs(self.xp-xcenter)>inc:							self.Left+=inc							xdir=inc							hasmove=True					if self.xp<xcenter:						if abs(self.xp-xcenter)>inc:							self.Left-=inc							xdir=-inc							hasmove=True					if self.yp>(ycenter):						if abs(self.yp-ycenter)>inc:							self.Top+=inc							ydir=inc							hasmove=True					if self.yp<ycenter:						if abs(self.yp-ycenter)>inc:							self.Top-=inc							hasmove=True							ydir=-inc					if hasmove==False and self._Gravitybuf==True:						self._Gravity=True					if self.caller!=None and 'LocationHeading' in self.wiredevents:						x=self.Left+self.Width/2						y=self.Top+self.Height/2						self.wiredevents['LocationHeading'](x,y,xdir,ydir)				try:				if self.schmove.Event():#timer routine()					moverot(inc)					self.schmove.Start()				if self.schgravity.Event():#timer routine()						if self._Gravity and self._stun==False:						self.yp+=self._GavityValue						inc=self._GavityValue						moverot(inc)					self.schgravity.Start()					except:				a=0			if self.sch.Event():#timer routine								try:										self.xxx=self.image_surface[self.currimgptr]					#self.DrawingArea1.queue_draw()					self.DrawingArea1.LoadPictureOCV=self.xxx					if self._autoinc==True:						self.currimgptr+=1													if self.currimgptr==self.numimg:						self.currimgptr=0				except:					a=0																	self.sch.Start()#restart scheduler			return True	#return true so that main_loop can call it again 		def createwidget(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.createwidget("{'Events': '[[, ]]', 'Var': '', 'Top': '60', 'Left': '835', 'Width': '170', 'Text': '0', 'Visible': 'False', 'Tag': '', 'ParentsType': '', 'Help': '', 'BackColor': '(1,1,1,1)', 'Picture': '', 'Height': '30', 'ForeColor': '(0,0,0,1)', 'Font': '', 'Name': 'Entry1', 'Alignment': '', 'Enable': 'True'}","QLineEdit","usercontrol","[]")		self.createwidget("{'Events': '[clicked]', 'Var': '', 'Top': '95', 'Left': '835', 'Width': '100', 'Text': 'Run/Pause', 'Visible': 'False', 'Tag': '', 'ParentsType': '', 'Help': '', 'BackColor': '(1,1,1,1)', 'Picture': '', 'Height': '50', 'ForeColor': '(0,0,0,1)', 'Font': '', 'Name': 'Button10', 'Enable': 'True'}","QPushButton","usercontrol","[['clicked', 'self,e']]")		self.createwidget("{'Events': '[clicked]', 'Var': '', 'Top': '145', 'Left': '835', 'Width': '100', 'Text': 'SetSpeed', 'Visible': 'False', 'Tag': '', 'ParentsType': '', 'Help': '', 'BackColor': '(1,1,1,1)', 'Picture': '', 'Height': '50', 'ForeColor': '(0,0,0,1)', 'Font': '', 'Name': 'Button11', 'Enable': 'True'}","QPushButton","usercontrol","[['clicked', 'self,e']]")		self.createwidget("{'Events': '[clicked]', 'Var': '', 'Top': '195', 'Left': '835', 'Width': '100', 'Text': 'SetFrameNumber', 'Visible': 'False', 'Tag': '', 'ParentsType': '', 'Help': '', 'BackColor': '(1,1,1,1)', 'Picture': '', 'Height': '50', 'ForeColor': '(0,0,0,1)', 'Font': '', 'Name': 'Button12', 'Enable': 'True'}","QPushButton","usercontrol","[['clicked', 'self,e']]")		self.DrawingArea1=forms		self.createwidget("{'Events': '[installEventFilter]', 'Var': '', 'Top': '0', 'Left': '0', 'Width': '240', 'Text': 'DrawingArea1', 'Visible': 'True', 'Tag': '', 'ParentsType': '', 'Help': '', 'BackColor': '(0, 0.004564714409092119, 0.16754722135048672, 0)', 'Picture': '', 'Height': '180', 'ForeColor': '(0,0,0,1)', 'Font': '', 'Name': 'DrawingArea1', 'Enable': 'True'}","QLabel","usercontrol","[['installEventFilter', 'self']]")	def Widget(self):		return self		def DrawingArea1_draw(self,wid, cr):		try:			if self._AutoScale:				cr.scale(self.scalex,self.scaley)			cr.set_source_surface(self.xxx, 0, 0)			cr.paint()		except:			pass	def Move(self,x,y):		self.xp=x		self.yp=y		self._Gravity=False	def MoveInstant(self,x,y):		self.Left=x-(self.Width/2);self.Top=y-(self.Height/2);		self.xp=x		self.yp=y		self._Gravity=False		def GetImageFile(self,folder):		import cv2		from os import listdir		from os.path import isfile, join		import os				if FileExist(folder) and GetPath(folder).find("\\")==-1 and GetPath(folder).find("/")==-1:			folder=folder.replace("\\","/")			buf=GetPath(folder)			folder=folder.replace(buf+"/","")			folder=app_path()+"/"+folder		onlyfiles = [f for f in os.listdir(folder+'/') if os.path.isfile(folder+'/'+f)]		self.numimg=len(onlyfiles)		self.image_surface=[0]*16		for a in range(1,self.numimg+1):			im=cv2.imread(folder+'/'+ str(a)+".png",cv2.IMREAD_UNCHANGED)			self.image_surface[a-1] = cv2.resize(im,(self.Height,self.Width))						def SetFrame(self,index):		if index<self.numimg:			self.xxx=self.image_surface[self.currimgptr]			self.DrawingArea1.LoadPictureOCV=self.xxx	def Pause(self):		self._autoinc=False	def Run(self):		self._autoinc=True	def Button10_clicked(self,e):		if self._autoinc==True:			self._autoinc=False		else:			self._autoinc=True		pass	def Button11_clicked(self,e):		self.Speed(int(self.Entry1.Text))	def Button12_clicked(self,e):		self.SetFrame(int(self.Entry1.Text))		pass	def MoveSpeed(self,ms):		self.schmove.Stop()		self.schmove=Scheduler(ms)#500 ms		self.schmove.Start()	def eventFilter(self, obj, event):		if obj==self.DrawingArea1.obj:			if event.type() == QtCore.QEvent.MouseButtonPress:				if self.caller!=None and 'buttonpress' in self.wiredevents:self.wiredevents['buttonpress']()			if event.type() == QtCore.QEvent.MouseButtonRelease:				if self.caller!=None and 'buttonrelease' in self.wiredevents:self.wiredevents['buttonrelease']()		return super(Handler, self).eventFilter(obj, event)		if __name__ == '__main__':	import sys	app = QtWidgets.QApplication(sys.argv)	w = Handler()	w.show()	sys.exit(app.exec_())