from PyQt5 import QtCore, QtWidgetsfrom PyQt5.QtGui import * from wired_module import * #	Generated By WiredQT for Python: by Rocky Nuarin, 2021 Philsclass Handler(QtWidgets.QWidget,usercontrol):	#WiredEvent def Tick()		#WiredProperty 'Interval': '1000'		def __init__(self, *param):    		super(Handler, self).__init__(None)		initUI(self,param,w=1366,h=768,title="WiredQT v1.0",controlbox=True,startpos=(0,30),timeoutdestroy=-1)		self.GTKForms()		self.timer=QtCore.QTimer()		self.timer.timeout.connect(self.loop)		self.timer.start(10)       				self.sch=Scheduler(0)		self.interval=0		self.enabled=False	def activeXcreated(self):		pass	def loop(self):		if self.form_load==False:			self.form_load=True		if self.sch._flag and self.sch.Event():#timer routine			if self.caller!=None:				if 'Tick' in self.wiredevents:						self.wiredevents['Tick']()			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})		@property	def Interval(self):		return self.interval	@Interval.setter	def Interval(self,value):		value=int(value)		self.sch=Scheduler(value)		self.interval=value		pass	@property	def Enable(self):		return self.enabled	@Enable.setter	def Enable(self,value):		if type(value)==str:			value=TrueFalse(value)		self.enabled=value		if value==True:			self.sch.Start()		else:			self.sch.Stop()		pass	def createwidget(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		pass	def Widget(self):		return selfif __name__ == '__main__':	import sys	app = QtWidgets.QApplication(sys.argv)	w = Handler()	w.show()	sys.exit(app.exec_())