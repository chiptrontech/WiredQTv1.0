from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import * 
from wired_module import * 

import matplotlib
import random 
matplotlib.use('Qt5Agg')

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg,FigureCanvas,NavigationToolbar2QT as NavigationToolbar

from matplotlib.figure import Figure

#	Generated By WiredQT for Python: by Rocky Nuarin, 2021 Phils
class Handler(QtWidgets.QWidget,usercontrol):
	#WiredProperty 'Scatter': 'False','list':["True","False"]
	#WiredProperty 'MarkerSize': '3'
	#WiredProperty 'Title': 'My Graph'
	#WiredProperty 'LineStyle': 'solid','list':["none","solid","dotted","dashed","dashdot"]
	def __init__(self, *param):    
		super(Handler, self).__init__(None)
		initUI(self,param,w=800,h=800,title="WiredQTv5.0",controlbox=True,startpos=(0,30),timeoutdestroy=-1)
		self.GTKForms()
		self.timer=QtCore.QTimer()
		self.timer.timeout.connect(self.loop)
		self.timer.start(10)       

		self.sch=Scheduler(5000)#500 ms
		self.sch.Start()
		self._Scatter="True"
		self._MarkerSize="3"
		self._Title="My Graph"
		self._LineStyle="dotted"
	@property
	def LineStyle(self):
		return self._LineStyle
	@LineStyle.setter	
	def LineStyle(self,value):
		self._LineStyle=value		
	@property
	def Title(self):
		return self._Title
	@Title.setter	
	def Title(self,value):
		self._Title=value		
	@property
	def MarkerSize(self):
		return self._MarkerSize
	@MarkerSize.setter	
	def MarkerSize(self,value):
		self._MarkerSize=value		
	@property
	def Scatter(self):
		return self._Scatter
	@Scatter.setter	
	def Scatter(self,value):
		self._Scatter=value				
	def createwidget(self,prop,control,parent,event=[]):
		createWidget(self,prop,control,parent,event)         
	def GTKForms(self):
		pass
	def Widget(self):
		return self    
	def loop(self):
		if self.form_load==False:
			self.form_load=True
		if self.sch.Event():#timer routine
			#code here
			if self.timeoutdestroy!=-1:
				self.timeoutdestroy-=1
				if self.timeoutdestroy==0:
					pass#self.unload(None)
			self.sch.Start()#restart scheduler      

	def connect(self,ev,evusr):
		self.wiredevents.update({ev:evusr})     
	def activeXcreated(self,*args):
		pass    
	def eventFilter(self, obj, event):
		return super(Handler, self).eventFilter(obj, event)

	def setTitle(self, title):
		try:
			self.a.set_title(title)
		except:
			pass
	def graphMultiple(self, *x):
		self._Grid=True	
		f = Figure(figsize=(5, 4), dpi=100)
		self.a = f.add_subplot(111)
		arg=""
		for i,a in enumerate(x):
			#if i==len(x)-1:break
			arg+='x['+str(i)+'],'
		arg=arg[:-1]
		if self._Scatter=="True":
			eval('self.a.plot('+arg+',markersize=%s,linestyle=\'%s\',marker=\'o\')'%(self._MarkerSize,self._LineStyle))			
		else:
			eval('self.a.plot('+arg+',markersize=%s,linestyle=\'%s\')'%(self._MarkerSize,self._LineStyle))
		self.setTitle( self._Title)
		self.a.grid(TrueFalse(self._Grid))	
		self.canvas = FigureCanvas(f)  # a Gtk.DrawingArea
		self.canvas.setFixedWidth(self.Width)
		self.canvas.setFixedHeight(self.Height)
		self.canvas.setParent(self)
		forms(self.canvas).Visible=True
		a=0
if __name__ == '__main__':
	import sys
	app = QtWidgets.QApplication(sys.argv)
	w = Handler()
	w.show()
	sys.exit(app.exec_())
