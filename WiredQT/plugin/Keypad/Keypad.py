from PyQt5 import QtCore, QtWidgetsfrom PyQt5.QtGui import * from wired_module import * #	Generated By WiredQT for Python: by Rocky Nuarin, 2021 Philsclass Keypad:	def __init__(self,row1,row2,row3,row4,col1,col2,col3,col4=-1):		self.ROW1=row1;		self.ROW2=row2;		self.ROW3=row3;		self.ROW4=row4;		self.COL1=col1;		self.COL2=col2;		self.COL3=col3;		self.COL4=col4;		pinMode(self.ROW1, INPUT_PULLUP);		pinMode(self.ROW2, INPUT_PULLUP);		pinMode(self.ROW3, INPUT_PULLUP);		pinMode(self.ROW4, INPUT_PULLUP);		pinMode(self.COL1, OUTPUT);		pinMode(self.COL2, OUTPUT);		pinMode(self.COL3, OUTPUT);		if(self.COL4!=-1):			pinMode(self.COL4, OUTPUT)					self.keydeb=100;	def scankey(self):		digitalWrite(self.COL1, HIGH);      		digitalWrite(self.COL2, HIGH);      		digitalWrite(self.COL3, HIGH);      		if(self.COL4!=-1):			digitalWrite(self.COL4, HIGH);      		digitalWrite(self.COL1, LOW);      #enable first column		if(digitalRead(self.ROW1)==LOW): return '1';		if(digitalRead(self.ROW2)==LOW): return '4';		if(digitalRead(self.ROW3)==LOW): return '7';		if(digitalRead(self.ROW4)==LOW): return '*';		digitalWrite(self.COL1, HIGH);      #disable 1st column		digitalWrite(self.COL2, LOW);      #enable 2nd column		if(digitalRead(self.ROW1)==LOW): return '2';		if(digitalRead(self.ROW2)==LOW): return '5';		if(digitalRead(self.ROW3)==LOW): return '8';		if(digitalRead(self.ROW4)==LOW): return '0';		digitalWrite(self.COL2, HIGH);      #disable 2nd column		digitalWrite(self.COL3, LOW);      #enable 3rd column		if(digitalRead(self.ROW1)==LOW): return '3';		if(digitalRead(self.ROW2)==LOW): return '6';		if(digitalRead(self.ROW3)==LOW): return '9';		if(digitalRead(self.ROW4)==LOW): return '#';		digitalWrite(self.COL3, HIGH);      #disable 3rd column		if(self.COL4!=-1):			digitalWrite(self.COL4, LOW);      #enable 4th column			if(digitalRead(self.ROW1)==LOW): return 'A';			if(digitalRead(self.ROW2)==LOW): return 'B';			if(digitalRead(self.ROW3)==LOW): return 'C';			if(digitalRead(self.ROW4)==LOW): return 'D';			digitalWrite(self.COL3, HIGH);      #disable 3rd column		return 'E';                 #no keypress	def w8_key_release(self):		for n in range(self.keydeb):			if(self.scankey() == 'E'):				n+=1;			else:				n=0;	def keypressed(self):		if(self.scankey()=='E'):			return False;		else:			return True;	def readkey(self):		ret=self.scankey();		delay(10);				return ret;class Handler(QtWidgets.QWidget,usercontrol):	#WiredEvent def onKeydown(self,key)	#WiredEvent def onKeyup(self,key)	#WiredProperty 'ROW1': '18'	#WiredProperty 'ROW2': '19'	#WiredProperty 'ROW3': '20'	#WiredProperty 'ROW4': '21'	#WiredProperty 'COL1': '4'	#WiredProperty 'COL2': '5'	#WiredProperty 'COL3': '6'	#WiredProperty 'COL4': '-1'		def __init__(self, *param):    		super(Handler, self).__init__(None)		initUI(self,param,w=1366,h=600,title="WiredQTv5.0",controlbox=True,startpos=(0,30),timeoutdestroy=-1)		self.GTKForms()		self.timer=QtCore.QTimer()		self.timer.timeout.connect(self.loop)		self.timer.start(10)    		self.sch=Scheduler(200)#500 ms		self.sch.Start()		self._ROW1=""		self._ROW2=""		self._ROW3=""		self._ROW4=""		self._COL1=""		self._COL2=""		self._COL3=""		self._COL4=""		self._key=""		self.flagdown=False	@property	def ROW1(self):		return self._ROW1	@ROW1.setter		def ROW1(self,value):		self._ROW1=int(value)	@property	def ROW2(self):		return self._ROW2	@ROW2.setter		def ROW2(self,value):		self._ROW2=int(value)	@property	def ROW3(self):		return self._ROW3	@ROW3.setter		def ROW3(self,value):		self._ROW3=int(value)	@property	def ROW4(self):		return self._ROW4	@ROW4.setter		def ROW4(self,value):		self._ROW4=int(value)	@property	def COL1(self):		return self._COL1	@COL1.setter		def COL1(self,value):		self._COL1=int(value)	@property	def COL2(self):		return self._COL2	@COL2.setter		def COL2(self,value):		self._COL2=int(value)	@property	def COL3(self):		return self._COL3	@COL3.setter		def COL3(self,value):		self._COL3=int(value)	@property	def COL4(self):		return self._COL4	@COL4.setter		def COL4(self,value):		self._COL4=int(value)	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		self.key=Keypad(self._ROW1,self._ROW2,self._ROW3,self._ROW4,self._COL1,self._COL2,self._COL3,self._COL4)		pass			def loop(self):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			if self.key.keypressed()==False and self.flagdown==True:				self.flagdown=False				if self.caller!=None and 'onKeyup' in self.wiredevents:					self.wiredevents['onKeyup'](self._key)			if self.key.keypressed() and self.flagdown==False:				self.flagdown=True				self._key=self.key.readkey()				if self.caller!=None and 'onKeydown' in self.wiredevents:					self.wiredevents['onKeydown'](self._key)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def createwidget(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.createwidget("{'BackColor': '(1,1,1,1)', 'Width': '100', 'Name': 'Button1', 'Tag': '', 'Height': '50', 'Font': '', 'ParentsType': '', 'Top': '125', 'Var': '', 'Left': '90', 'Events': '[clicked]', 'Picture': '', 'Text': 'Button1', 'Help': '', 'Enable': 'True', 'Visible': 'True', 'ForeColor': '(0,0,0,1)'}","QPushButton","usercontrol","[['clicked', 'self,e']]")	def Widget(self):		return self	def Button1_clicked(self,e):		#import pdb;pdb.set_trace();		a=self.key.readkey()		self.window.Text= a		passif __name__ == '__main__':	import sys	app = QtWidgets.QApplication(sys.argv)	w = Handler()	w.show()	sys.exit(app.exec_())